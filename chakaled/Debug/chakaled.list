
chakaled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004298  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800453c  0800453c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800453c  0800453c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800453c  0800453c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000219c  20000010  08004554  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ac  08004554  000221ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e68  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a2  00000000  00000000  00030ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00033848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00034610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fb6  00000000  00000000  000352d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101cb  00000000  00000000  0004d286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeb6  00000000  00000000  0005d451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003724  00000000  00000000  000e8358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004390 	.word	0x08004390

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004390 	.word	0x08004390

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 8000154:	4a1c      	ldr	r2, [pc, #112]	; (80001c8 <MX_FREERTOS_Init+0x78>)
 8000156:	2100      	movs	r1, #0
 8000158:	481c      	ldr	r0, [pc, #112]	; (80001cc <MX_FREERTOS_Init+0x7c>)
 800015a:	f001 fc6b 	bl	8001a34 <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a1b      	ldr	r2, [pc, #108]	; (80001d0 <MX_FREERTOS_Init+0x80>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000164:	4a1b      	ldr	r2, [pc, #108]	; (80001d4 <MX_FREERTOS_Init+0x84>)
 8000166:	2100      	movs	r1, #0
 8000168:	481b      	ldr	r0, [pc, #108]	; (80001d8 <MX_FREERTOS_Init+0x88>)
 800016a:	f001 fc63 	bl	8001a34 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a1a      	ldr	r2, [pc, #104]	; (80001dc <MX_FREERTOS_Init+0x8c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000174:	4a1a      	ldr	r2, [pc, #104]	; (80001e0 <MX_FREERTOS_Init+0x90>)
 8000176:	2100      	movs	r1, #0
 8000178:	481a      	ldr	r0, [pc, #104]	; (80001e4 <MX_FREERTOS_Init+0x94>)
 800017a:	f001 fc5b 	bl	8001a34 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a19      	ldr	r2, [pc, #100]	; (80001e8 <MX_FREERTOS_Init+0x98>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000184:	4a19      	ldr	r2, [pc, #100]	; (80001ec <MX_FREERTOS_Init+0x9c>)
 8000186:	2100      	movs	r1, #0
 8000188:	4819      	ldr	r0, [pc, #100]	; (80001f0 <MX_FREERTOS_Init+0xa0>)
 800018a:	f001 fc53 	bl	8001a34 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a18      	ldr	r2, [pc, #96]	; (80001f4 <MX_FREERTOS_Init+0xa4>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8000194:	4a18      	ldr	r2, [pc, #96]	; (80001f8 <MX_FREERTOS_Init+0xa8>)
 8000196:	2100      	movs	r1, #0
 8000198:	4818      	ldr	r0, [pc, #96]	; (80001fc <MX_FREERTOS_Init+0xac>)
 800019a:	f001 fc4b 	bl	8001a34 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a17      	ldr	r2, [pc, #92]	; (8000200 <MX_FREERTOS_Init+0xb0>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 80001a4:	4a17      	ldr	r2, [pc, #92]	; (8000204 <MX_FREERTOS_Init+0xb4>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4817      	ldr	r0, [pc, #92]	; (8000208 <MX_FREERTOS_Init+0xb8>)
 80001aa:	f001 fc43 	bl	8001a34 <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a16      	ldr	r2, [pc, #88]	; (800020c <MX_FREERTOS_Init+0xbc>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 80001b4:	4a16      	ldr	r2, [pc, #88]	; (8000210 <MX_FREERTOS_Init+0xc0>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4816      	ldr	r0, [pc, #88]	; (8000214 <MX_FREERTOS_Init+0xc4>)
 80001ba:	f001 fc3b 	bl	8001a34 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a15      	ldr	r2, [pc, #84]	; (8000218 <MX_FREERTOS_Init+0xc8>)
 80001c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	08004414 	.word	0x08004414
 80001cc:	0800021d 	.word	0x0800021d
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08004438 	.word	0x08004438
 80001d8:	0800027d 	.word	0x0800027d
 80001dc:	20000030 	.word	0x20000030
 80001e0:	0800445c 	.word	0x0800445c
 80001e4:	080002dd 	.word	0x080002dd
 80001e8:	20000034 	.word	0x20000034
 80001ec:	08004480 	.word	0x08004480
 80001f0:	0800033d 	.word	0x0800033d
 80001f4:	20000038 	.word	0x20000038
 80001f8:	080044a4 	.word	0x080044a4
 80001fc:	0800039d 	.word	0x0800039d
 8000200:	2000003c 	.word	0x2000003c
 8000204:	080044c8 	.word	0x080044c8
 8000208:	080003fd 	.word	0x080003fd
 800020c:	20000040 	.word	0x20000040
 8000210:	080044ec 	.word	0x080044ec
 8000214:	0800045d 	.word	0x0800045d
 8000218:	20000044 	.word	0x20000044

0800021c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000224:	2001      	movs	r0, #1
 8000226:	f001 fcaf 	bl	8001b88 <osDelay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
 800022a:	2102      	movs	r1, #2
 800022c:	4811      	ldr	r0, [pc, #68]	; (8000274 <StartDefaultTask+0x58>)
 800022e:	f000 fda3 	bl	8000d78 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	2b01      	cmp	r3, #1
 8000236:	d10e      	bne.n	8000256 <StartDefaultTask+0x3a>
  	  uint8_t TxDataon[2]= {0x01, 0x0A};
 8000238:	f640 2301 	movw	r3, #2561	; 0xa01
 800023c:	81bb      	strh	r3, [r7, #12]
  	  HAL_UART_Transmit(&huart1,TxDataon,2,10);
 800023e:	f107 010c 	add.w	r1, r7, #12
 8000242:	230a      	movs	r3, #10
 8000244:	2202      	movs	r2, #2
 8000246:	480c      	ldr	r0, [pc, #48]	; (8000278 <StartDefaultTask+0x5c>)
 8000248:	f001 fa0e 	bl	8001668 <HAL_UART_Transmit>
  	  HAL_Delay(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000250:	f000 fb06 	bl	8000860 <HAL_Delay>
 8000254:	e7e6      	b.n	8000224 <StartDefaultTask+0x8>
    }else{
      uint8_t TxDataoff[2]= {0x01, 0x0F};
 8000256:	f640 7301 	movw	r3, #3841	; 0xf01
 800025a:	813b      	strh	r3, [r7, #8]
      HAL_UART_Transmit(&huart1,TxDataoff,2,10);
 800025c:	f107 0108 	add.w	r1, r7, #8
 8000260:	230a      	movs	r3, #10
 8000262:	2202      	movs	r2, #2
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <StartDefaultTask+0x5c>)
 8000266:	f001 f9ff 	bl	8001668 <HAL_UART_Transmit>
      HAL_Delay(500);
 800026a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026e:	f000 faf7 	bl	8000860 <HAL_Delay>
    osDelay(1);
 8000272:	e7d7      	b.n	8000224 <StartDefaultTask+0x8>
 8000274:	40010800 	.word	0x40010800
 8000278:	20000048 	.word	0x20000048

0800027c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
__weak void StartTask02(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000284:	2001      	movs	r0, #1
 8000286:	f001 fc7f 	bl	8001b88 <osDelay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1){
 800028a:	2104      	movs	r1, #4
 800028c:	4811      	ldr	r0, [pc, #68]	; (80002d4 <StartTask02+0x58>)
 800028e:	f000 fd73 	bl	8000d78 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b01      	cmp	r3, #1
 8000296:	d10e      	bne.n	80002b6 <StartTask02+0x3a>
  	  uint8_t TxDataon[2]= {0x02, 0x0A};
 8000298:	f640 2302 	movw	r3, #2562	; 0xa02
 800029c:	81bb      	strh	r3, [r7, #12]
  	  HAL_UART_Transmit(&huart1,TxDataon,2,10);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	230a      	movs	r3, #10
 80002a4:	2202      	movs	r2, #2
 80002a6:	480c      	ldr	r0, [pc, #48]	; (80002d8 <StartTask02+0x5c>)
 80002a8:	f001 f9de 	bl	8001668 <HAL_UART_Transmit>
  	  HAL_Delay(500);
 80002ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b0:	f000 fad6 	bl	8000860 <HAL_Delay>
 80002b4:	e7e6      	b.n	8000284 <StartTask02+0x8>
    }else{
    uint8_t TxDataoff[2]= {0x02, 0x0F};
 80002b6:	f640 7302 	movw	r3, #3842	; 0xf02
 80002ba:	813b      	strh	r3, [r7, #8]
    HAL_UART_Transmit(&huart1,TxDataoff,2,10);
 80002bc:	f107 0108 	add.w	r1, r7, #8
 80002c0:	230a      	movs	r3, #10
 80002c2:	2202      	movs	r2, #2
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <StartTask02+0x5c>)
 80002c6:	f001 f9cf 	bl	8001668 <HAL_UART_Transmit>
    HAL_Delay(500);
 80002ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ce:	f000 fac7 	bl	8000860 <HAL_Delay>
    osDelay(1);
 80002d2:	e7d7      	b.n	8000284 <StartTask02+0x8>
 80002d4:	40010800 	.word	0x40010800
 80002d8:	20000048 	.word	0x20000048

080002dc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
__weak void StartTask03(void *argument)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f001 fc4f 	bl	8001b88 <osDelay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1){
 80002ea:	2108      	movs	r1, #8
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <StartTask03+0x58>)
 80002ee:	f000 fd43 	bl	8000d78 <HAL_GPIO_ReadPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d10e      	bne.n	8000316 <StartTask03+0x3a>
  	  uint8_t TxDataon[2]= {0x03, 0x0A};
 80002f8:	f640 2303 	movw	r3, #2563	; 0xa03
 80002fc:	81bb      	strh	r3, [r7, #12]
  	  HAL_UART_Transmit(&huart1,TxDataon,2,10);
 80002fe:	f107 010c 	add.w	r1, r7, #12
 8000302:	230a      	movs	r3, #10
 8000304:	2202      	movs	r2, #2
 8000306:	480c      	ldr	r0, [pc, #48]	; (8000338 <StartTask03+0x5c>)
 8000308:	f001 f9ae 	bl	8001668 <HAL_UART_Transmit>
  	  HAL_Delay(500);
 800030c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000310:	f000 faa6 	bl	8000860 <HAL_Delay>
 8000314:	e7e6      	b.n	80002e4 <StartTask03+0x8>
    }else{
    uint8_t TxDataoff[2]= {0x03, 0x0F};
 8000316:	f640 7303 	movw	r3, #3843	; 0xf03
 800031a:	813b      	strh	r3, [r7, #8]
    HAL_UART_Transmit(&huart1,TxDataoff,2,10);
 800031c:	f107 0108 	add.w	r1, r7, #8
 8000320:	230a      	movs	r3, #10
 8000322:	2202      	movs	r2, #2
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <StartTask03+0x5c>)
 8000326:	f001 f99f 	bl	8001668 <HAL_UART_Transmit>
    HAL_Delay(500);
 800032a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032e:	f000 fa97 	bl	8000860 <HAL_Delay>
    osDelay(1);
 8000332:	e7d7      	b.n	80002e4 <StartTask03+0x8>
 8000334:	40010800 	.word	0x40010800
 8000338:	20000048 	.word	0x20000048

0800033c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
__weak void StartTask04(void *argument)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000344:	2001      	movs	r0, #1
 8000346:	f001 fc1f 	bl	8001b88 <osDelay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1){
 800034a:	2110      	movs	r1, #16
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <StartTask04+0x58>)
 800034e:	f000 fd13 	bl	8000d78 <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b01      	cmp	r3, #1
 8000356:	d10e      	bne.n	8000376 <StartTask04+0x3a>
  	  uint8_t TxDataon[2]= {0x04, 0x0A};
 8000358:	f640 2304 	movw	r3, #2564	; 0xa04
 800035c:	81bb      	strh	r3, [r7, #12]
  	  HAL_UART_Transmit(&huart1,TxDataon,2,10);
 800035e:	f107 010c 	add.w	r1, r7, #12
 8000362:	230a      	movs	r3, #10
 8000364:	2202      	movs	r2, #2
 8000366:	480c      	ldr	r0, [pc, #48]	; (8000398 <StartTask04+0x5c>)
 8000368:	f001 f97e 	bl	8001668 <HAL_UART_Transmit>
  	  HAL_Delay(500);
 800036c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000370:	f000 fa76 	bl	8000860 <HAL_Delay>
 8000374:	e7e6      	b.n	8000344 <StartTask04+0x8>
    }else{
    uint8_t TxDataoff[2]= {0x04, 0x0F};
 8000376:	f640 7304 	movw	r3, #3844	; 0xf04
 800037a:	813b      	strh	r3, [r7, #8]
    HAL_UART_Transmit(&huart1,TxDataoff,2,10);
 800037c:	f107 0108 	add.w	r1, r7, #8
 8000380:	230a      	movs	r3, #10
 8000382:	2202      	movs	r2, #2
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <StartTask04+0x5c>)
 8000386:	f001 f96f 	bl	8001668 <HAL_UART_Transmit>
    HAL_Delay(500);
 800038a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038e:	f000 fa67 	bl	8000860 <HAL_Delay>
    osDelay(1);
 8000392:	e7d7      	b.n	8000344 <StartTask04+0x8>
 8000394:	40010800 	.word	0x40010800
 8000398:	20000048 	.word	0x20000048

0800039c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
__weak void StartTask05(void *argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f001 fbef 	bl	8001b88 <osDelay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 80003aa:	2120      	movs	r1, #32
 80003ac:	4811      	ldr	r0, [pc, #68]	; (80003f4 <StartTask05+0x58>)
 80003ae:	f000 fce3 	bl	8000d78 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d10e      	bne.n	80003d6 <StartTask05+0x3a>
  	  uint8_t TxDataon[2]= {0x05, 0x0A};
 80003b8:	f640 2305 	movw	r3, #2565	; 0xa05
 80003bc:	81bb      	strh	r3, [r7, #12]
  	  HAL_UART_Transmit(&huart1,TxDataon,2,10);
 80003be:	f107 010c 	add.w	r1, r7, #12
 80003c2:	230a      	movs	r3, #10
 80003c4:	2202      	movs	r2, #2
 80003c6:	480c      	ldr	r0, [pc, #48]	; (80003f8 <StartTask05+0x5c>)
 80003c8:	f001 f94e 	bl	8001668 <HAL_UART_Transmit>
  	  HAL_Delay(500);
 80003cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d0:	f000 fa46 	bl	8000860 <HAL_Delay>
 80003d4:	e7e6      	b.n	80003a4 <StartTask05+0x8>
    }else{
    uint8_t TxDataoff[2]= {0x05, 0x0F};
 80003d6:	f640 7305 	movw	r3, #3845	; 0xf05
 80003da:	813b      	strh	r3, [r7, #8]
    HAL_UART_Transmit(&huart1,TxDataoff,2,10);
 80003dc:	f107 0108 	add.w	r1, r7, #8
 80003e0:	230a      	movs	r3, #10
 80003e2:	2202      	movs	r2, #2
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <StartTask05+0x5c>)
 80003e6:	f001 f93f 	bl	8001668 <HAL_UART_Transmit>
    HAL_Delay(500);
 80003ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ee:	f000 fa37 	bl	8000860 <HAL_Delay>
    osDelay(1);
 80003f2:	e7d7      	b.n	80003a4 <StartTask05+0x8>
 80003f4:	40010800 	.word	0x40010800
 80003f8:	20000048 	.word	0x20000048

080003fc <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
__weak void StartTask06(void *argument)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f001 fbbf 	bl	8001b88 <osDelay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1){
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4811      	ldr	r0, [pc, #68]	; (8000454 <StartTask06+0x58>)
 800040e:	f000 fcb3 	bl	8000d78 <HAL_GPIO_ReadPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b01      	cmp	r3, #1
 8000416:	d10e      	bne.n	8000436 <StartTask06+0x3a>
  	  uint8_t TxDataon[2]= {0x06, 0x0A};
 8000418:	f640 2306 	movw	r3, #2566	; 0xa06
 800041c:	81bb      	strh	r3, [r7, #12]
  	  HAL_UART_Transmit(&huart1,TxDataon,2,10);
 800041e:	f107 010c 	add.w	r1, r7, #12
 8000422:	230a      	movs	r3, #10
 8000424:	2202      	movs	r2, #2
 8000426:	480c      	ldr	r0, [pc, #48]	; (8000458 <StartTask06+0x5c>)
 8000428:	f001 f91e 	bl	8001668 <HAL_UART_Transmit>
  	  HAL_Delay(500);
 800042c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000430:	f000 fa16 	bl	8000860 <HAL_Delay>
 8000434:	e7e6      	b.n	8000404 <StartTask06+0x8>
    }else{
    uint8_t TxDataoff[2]= {0x06, 0x0F};
 8000436:	f640 7306 	movw	r3, #3846	; 0xf06
 800043a:	813b      	strh	r3, [r7, #8]
    HAL_UART_Transmit(&huart1,TxDataoff,2,10);
 800043c:	f107 0108 	add.w	r1, r7, #8
 8000440:	230a      	movs	r3, #10
 8000442:	2202      	movs	r2, #2
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <StartTask06+0x5c>)
 8000446:	f001 f90f 	bl	8001668 <HAL_UART_Transmit>
    HAL_Delay(500);
 800044a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800044e:	f000 fa07 	bl	8000860 <HAL_Delay>
    osDelay(1);
 8000452:	e7d7      	b.n	8000404 <StartTask06+0x8>
 8000454:	40010800 	.word	0x40010800
 8000458:	20000048 	.word	0x20000048

0800045c <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
__weak void StartTask07(void *argument)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f001 fb8f 	bl	8001b88 <osDelay>
 800046a:	e7fb      	b.n	8000464 <StartTask07+0x8>

0800046c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <MX_GPIO_Init+0x7c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a18      	ldr	r2, [pc, #96]	; (80004e8 <MX_GPIO_Init+0x7c>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_GPIO_Init+0x7c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_GPIO_Init+0x7c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <MX_GPIO_Init+0x7c>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_GPIO_Init+0x7c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <MX_GPIO_Init+0x7c>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <MX_GPIO_Init+0x7c>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <MX_GPIO_Init+0x7c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80004c8:	237e      	movs	r3, #126	; 0x7e
 80004ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <MX_GPIO_Init+0x80>)
 80004dc:	f000 fac8 	bl	8000a70 <HAL_GPIO_Init>

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 f952 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f80b 	bl	8000512 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f7ff ffb6 	bl	800046c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f8b0 	bl	8000664 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000504:	f001 fa30 	bl	8001968 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000508:	f7ff fe22 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800050c:	f001 fa5e 	bl	80019cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x20>

08000512 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b090      	sub	sp, #64	; 0x40
 8000516:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000518:	f107 0318 	add.w	r3, r7, #24
 800051c:	2228      	movs	r2, #40	; 0x28
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f003 ff2d 	bl	8004380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000550:	2300      	movs	r3, #0
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fc25 	bl	8000da8 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000564:	f000 f818 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2302      	movs	r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fe93 	bl	80012ac <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800058c:	f000 f804 	bl	8000598 <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3740      	adds	r7, #64	; 0x40
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_MspInit+0x68>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <HAL_MspInit+0x68>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_MspInit+0x68>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_MspInit+0x68>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <HAL_MspInit+0x68>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x68>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	210f      	movs	r1, #15
 80005de:	f06f 0001 	mvn.w	r0, #1
 80005e2:	f000 fa1c 	bl	8000a1e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x6c>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_MspInit+0x6c>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <NMI_Handler+0x4>

0800061a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <HardFault_Handler+0x4>

08000620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <MemManage_Handler+0x4>

08000626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <UsageFault_Handler+0x4>

08000632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f8f1 	bl	8000828 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000646:	f002 feab 	bl	80033a0 <xTaskGetSchedulerState>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d001      	beq.n	8000654 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000650:	f003 fc0a 	bl	8003e68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART1_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x4c>)
 800069c:	f000 ff94 	bl	80015c8 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f7ff ff77 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000048 	.word	0x20000048
 80006b4:	40013800 	.word	0x40013800

080006b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <HAL_UART_MspInit+0x8c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d131      	bne.n	800073c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <HAL_UART_MspInit+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1a      	ldr	r2, [pc, #104]	; (8000748 <HAL_UART_MspInit+0x90>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_UART_MspInit+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_UART_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <HAL_UART_MspInit+0x90>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_UART_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <HAL_UART_MspInit+0x94>)
 800071e:	f000 f9a7 	bl	8000a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_UART_MspInit+0x94>)
 8000738:	f000 f99a 	bl	8000a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40013800 	.word	0x40013800
 8000748:	40021000 	.word	0x40021000
 800074c:	40010800 	.word	0x40010800

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000750:	f7ff ff82 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000756:	490c      	ldr	r1, [pc, #48]	; (8000788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <LoopFillZerobss+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800076c:	4c09      	ldr	r4, [pc, #36]	; (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f003 fdcf 	bl	800431c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff feb7 	bl	80004f0 <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800078c:	08004544 	.word	0x08004544
  ldr r2, =_sbss
 8000790:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000794:	200021ac 	.word	0x200021ac

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f92b 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fef4 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f935 	bl	8000a56 <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f90b 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	20000090 	.word	0x20000090

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000090 	.word	0x20000090

08000860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff fff0 	bl	800084c <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_Delay+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffe0 	bl	800084c <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f7ff ff90 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff49 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff5e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff90 	bl	8000960 <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5f 	bl	800090c <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffb0 	bl	80009c4 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b08b      	sub	sp, #44	; 0x2c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e169      	b.n	8000d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a84:	2201      	movs	r2, #1
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	f040 8158 	bne.w	8000d52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	4a9a      	ldr	r2, [pc, #616]	; (8000d10 <HAL_GPIO_Init+0x2a0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d05e      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000aac:	4a98      	ldr	r2, [pc, #608]	; (8000d10 <HAL_GPIO_Init+0x2a0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d875      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000ab2:	4a98      	ldr	r2, [pc, #608]	; (8000d14 <HAL_GPIO_Init+0x2a4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d058      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000ab8:	4a96      	ldr	r2, [pc, #600]	; (8000d14 <HAL_GPIO_Init+0x2a4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d86f      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000abe:	4a96      	ldr	r2, [pc, #600]	; (8000d18 <HAL_GPIO_Init+0x2a8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d052      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000ac4:	4a94      	ldr	r2, [pc, #592]	; (8000d18 <HAL_GPIO_Init+0x2a8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d869      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000aca:	4a94      	ldr	r2, [pc, #592]	; (8000d1c <HAL_GPIO_Init+0x2ac>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d04c      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000ad0:	4a92      	ldr	r2, [pc, #584]	; (8000d1c <HAL_GPIO_Init+0x2ac>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d863      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000ad6:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <HAL_GPIO_Init+0x2b0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d046      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000adc:	4a90      	ldr	r2, [pc, #576]	; (8000d20 <HAL_GPIO_Init+0x2b0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d85d      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000ae2:	2b12      	cmp	r3, #18
 8000ae4:	d82a      	bhi.n	8000b3c <HAL_GPIO_Init+0xcc>
 8000ae6:	2b12      	cmp	r3, #18
 8000ae8:	d859      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000aea:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <HAL_GPIO_Init+0x80>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b6b 	.word	0x08000b6b
 8000af4:	08000b45 	.word	0x08000b45
 8000af8:	08000b57 	.word	0x08000b57
 8000afc:	08000b99 	.word	0x08000b99
 8000b00:	08000b9f 	.word	0x08000b9f
 8000b04:	08000b9f 	.word	0x08000b9f
 8000b08:	08000b9f 	.word	0x08000b9f
 8000b0c:	08000b9f 	.word	0x08000b9f
 8000b10:	08000b9f 	.word	0x08000b9f
 8000b14:	08000b9f 	.word	0x08000b9f
 8000b18:	08000b9f 	.word	0x08000b9f
 8000b1c:	08000b9f 	.word	0x08000b9f
 8000b20:	08000b9f 	.word	0x08000b9f
 8000b24:	08000b9f 	.word	0x08000b9f
 8000b28:	08000b9f 	.word	0x08000b9f
 8000b2c:	08000b9f 	.word	0x08000b9f
 8000b30:	08000b9f 	.word	0x08000b9f
 8000b34:	08000b4d 	.word	0x08000b4d
 8000b38:	08000b61 	.word	0x08000b61
 8000b3c:	4a79      	ldr	r2, [pc, #484]	; (8000d24 <HAL_GPIO_Init+0x2b4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d013      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b42:	e02c      	b.n	8000b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e029      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	3304      	adds	r3, #4
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e024      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	623b      	str	r3, [r7, #32]
          break;
 8000b5e:	e01f      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	330c      	adds	r3, #12
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	e01a      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d102      	bne.n	8000b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b72:	2304      	movs	r3, #4
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e013      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d105      	bne.n	8000b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b80:	2308      	movs	r3, #8
 8000b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	611a      	str	r2, [r3, #16]
          break;
 8000b8a:	e009      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	615a      	str	r2, [r3, #20]
          break;
 8000b96:	e003      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
          break;
 8000b9c:	e000      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          break;
 8000b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	2bff      	cmp	r3, #255	; 0xff
 8000ba4:	d801      	bhi.n	8000baa <HAL_GPIO_Init+0x13a>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_Init+0x13e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3304      	adds	r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	2bff      	cmp	r3, #255	; 0xff
 8000bb4:	d802      	bhi.n	8000bbc <HAL_GPIO_Init+0x14c>
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	e002      	b.n	8000bc2 <HAL_GPIO_Init+0x152>
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	3b08      	subs	r3, #8
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	210f      	movs	r1, #15
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	6a39      	ldr	r1, [r7, #32]
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 80b1 	beq.w	8000d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf0:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <HAL_GPIO_Init+0x2b8>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a4c      	ldr	r2, [pc, #304]	; (8000d28 <HAL_GPIO_Init+0x2b8>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <HAL_GPIO_Init+0x2b8>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c08:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <HAL_GPIO_Init+0x2bc>)
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	089b      	lsrs	r3, r3, #2
 8000c0e:	3302      	adds	r3, #2
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	220f      	movs	r2, #15
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <HAL_GPIO_Init+0x2c0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d013      	beq.n	8000c5c <HAL_GPIO_Init+0x1ec>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3f      	ldr	r2, [pc, #252]	; (8000d34 <HAL_GPIO_Init+0x2c4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00d      	beq.n	8000c58 <HAL_GPIO_Init+0x1e8>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <HAL_GPIO_Init+0x2c8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d007      	beq.n	8000c54 <HAL_GPIO_Init+0x1e4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3d      	ldr	r2, [pc, #244]	; (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d101      	bne.n	8000c50 <HAL_GPIO_Init+0x1e0>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c50:	2304      	movs	r3, #4
 8000c52:	e004      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c60:	f002 0203 	and.w	r2, r2, #3
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	4093      	lsls	r3, r2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c6e:	492f      	ldr	r1, [pc, #188]	; (8000d2c <HAL_GPIO_Init+0x2bc>)
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	492c      	ldr	r1, [pc, #176]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	608b      	str	r3, [r1, #8]
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	4928      	ldr	r1, [pc, #160]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	4922      	ldr	r1, [pc, #136]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	60cb      	str	r3, [r1, #12]
 8000cbc:	e006      	b.n	8000ccc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	491e      	ldr	r1, [pc, #120]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4918      	ldr	r1, [pc, #96]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	604b      	str	r3, [r1, #4]
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4914      	ldr	r1, [pc, #80]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d021      	beq.n	8000d44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	490e      	ldr	r1, [pc, #56]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	600b      	str	r3, [r1, #0]
 8000d0c:	e021      	b.n	8000d52 <HAL_GPIO_Init+0x2e2>
 8000d0e:	bf00      	nop
 8000d10:	10320000 	.word	0x10320000
 8000d14:	10310000 	.word	0x10310000
 8000d18:	10220000 	.word	0x10220000
 8000d1c:	10210000 	.word	0x10210000
 8000d20:	10120000 	.word	0x10120000
 8000d24:	10110000 	.word	0x10110000
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40011400 	.word	0x40011400
 8000d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_GPIO_Init+0x304>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	4909      	ldr	r1, [pc, #36]	; (8000d74 <HAL_GPIO_Init+0x304>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	3301      	adds	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f47f ae8e 	bne.w	8000a84 <HAL_GPIO_Init+0x14>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	372c      	adds	r7, #44	; 0x2c
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40010400 	.word	0x40010400

08000d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e001      	b.n	8000d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
	...

08000da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e272      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8087 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc8:	4b92      	ldr	r3, [pc, #584]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d00c      	beq.n	8000dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd4:	4b8f      	ldr	r3, [pc, #572]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d112      	bne.n	8000e06 <HAL_RCC_OscConfig+0x5e>
 8000de0:	4b8c      	ldr	r3, [pc, #560]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dec:	d10b      	bne.n	8000e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dee:	4b89      	ldr	r3, [pc, #548]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d06c      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x12c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d168      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e24c      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0e:	d106      	bne.n	8000e1e <HAL_RCC_OscConfig+0x76>
 8000e10:	4b80      	ldr	r3, [pc, #512]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a7f      	ldr	r2, [pc, #508]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e02e      	b.n	8000e7c <HAL_RCC_OscConfig+0xd4>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10c      	bne.n	8000e40 <HAL_RCC_OscConfig+0x98>
 8000e26:	4b7b      	ldr	r3, [pc, #492]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a7a      	ldr	r2, [pc, #488]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b78      	ldr	r3, [pc, #480]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a77      	ldr	r2, [pc, #476]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e01d      	b.n	8000e7c <HAL_RCC_OscConfig+0xd4>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0xbc>
 8000e4a:	4b72      	ldr	r3, [pc, #456]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a71      	ldr	r2, [pc, #452]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b6f      	ldr	r3, [pc, #444]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a6e      	ldr	r2, [pc, #440]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0xd4>
 8000e64:	4b6b      	ldr	r3, [pc, #428]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a6a      	ldr	r2, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b68      	ldr	r3, [pc, #416]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a67      	ldr	r2, [pc, #412]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d013      	beq.n	8000eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fce2 	bl	800084c <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fcde 	bl	800084c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e200      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0xe4>
 8000eaa:	e014      	b.n	8000ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fcce 	bl	800084c <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fcca 	bl	800084c <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e1ec      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	4b53      	ldr	r3, [pc, #332]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x10c>
 8000ed2:	e000      	b.n	8000ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d063      	beq.n	8000faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee2:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eee:	4b49      	ldr	r3, [pc, #292]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d11c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x18c>
 8000efa:	4b46      	ldr	r3, [pc, #280]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d116      	bne.n	8000f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <HAL_RCC_OscConfig+0x176>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d001      	beq.n	8000f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e1c0      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4939      	ldr	r1, [pc, #228]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f32:	e03a      	b.n	8000faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d020      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fc83 	bl	800084c <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4a:	f7ff fc7f 	bl	800084c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e1a1      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4927      	ldr	r1, [pc, #156]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	e015      	b.n	8000faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <HAL_RCC_OscConfig+0x270>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fc62 	bl	800084c <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc5e 	bl	800084c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e180      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d03a      	beq.n	800102c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_RCC_OscConfig+0x274>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fc42 	bl	800084c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc3e 	bl	800084c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e160      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 face 	bl	800158c <RCC_Delay>
 8000ff0:	e01c      	b.n	800102c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_RCC_OscConfig+0x274>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc28 	bl	800084c <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffe:	e00f      	b.n	8001020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc24 	bl	800084c <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d908      	bls.n	8001020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e146      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	42420000 	.word	0x42420000
 800101c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001020:	4b92      	ldr	r3, [pc, #584]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e9      	bne.n	8001000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a6 	beq.w	8001186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800103e:	4b8b      	ldr	r3, [pc, #556]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10d      	bne.n	8001066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b88      	ldr	r3, [pc, #544]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a87      	ldr	r2, [pc, #540]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b85      	ldr	r3, [pc, #532]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001062:	2301      	movs	r3, #1
 8001064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001066:	4b82      	ldr	r3, [pc, #520]	; (8001270 <HAL_RCC_OscConfig+0x4c8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001072:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x4c8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <HAL_RCC_OscConfig+0x4c8>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800107e:	f7ff fbe5 	bl	800084c <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001086:	f7ff fbe1 	bl	800084c <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b64      	cmp	r3, #100	; 0x64
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e103      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	4b75      	ldr	r3, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x4c8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x312>
 80010ac:	4b6f      	ldr	r3, [pc, #444]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4a6e      	ldr	r2, [pc, #440]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6213      	str	r3, [r2, #32]
 80010b8:	e02d      	b.n	8001116 <HAL_RCC_OscConfig+0x36e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x334>
 80010c2:	4b6a      	ldr	r3, [pc, #424]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a69      	ldr	r2, [pc, #420]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	4b67      	ldr	r3, [pc, #412]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a66      	ldr	r2, [pc, #408]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	6213      	str	r3, [r2, #32]
 80010da:	e01c      	b.n	8001116 <HAL_RCC_OscConfig+0x36e>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d10c      	bne.n	80010fe <HAL_RCC_OscConfig+0x356>
 80010e4:	4b61      	ldr	r3, [pc, #388]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4a60      	ldr	r2, [pc, #384]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6213      	str	r3, [r2, #32]
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4a5d      	ldr	r2, [pc, #372]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6213      	str	r3, [r2, #32]
 80010fc:	e00b      	b.n	8001116 <HAL_RCC_OscConfig+0x36e>
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a5a      	ldr	r2, [pc, #360]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b58      	ldr	r3, [pc, #352]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a57      	ldr	r2, [pc, #348]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d015      	beq.n	800114a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111e:	f7ff fb95 	bl	800084c <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	e00a      	b.n	800113c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f7ff fb91 	bl	800084c <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	f241 3288 	movw	r2, #5000	; 0x1388
 8001134:	4293      	cmp	r3, r2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e0b1      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0ee      	beq.n	8001126 <HAL_RCC_OscConfig+0x37e>
 8001148:	e014      	b.n	8001174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff fb7f 	bl	800084c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001152:	f7ff fb7b 	bl	800084c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001160:	4293      	cmp	r3, r2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e09b      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1ee      	bne.n	8001152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d105      	bne.n	8001186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117a:	4b3c      	ldr	r3, [pc, #240]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a3b      	ldr	r2, [pc, #236]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8087 	beq.w	800129e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b08      	cmp	r3, #8
 800119a:	d061      	beq.n	8001260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d146      	bne.n	8001232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_RCC_OscConfig+0x4cc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb4f 	bl	800084c <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff fb4b 	bl	800084c <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e06d      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f0      	bne.n	80011b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d108      	bne.n	80011ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	4921      	ldr	r1, [pc, #132]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a19      	ldr	r1, [r3, #32]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	430b      	orrs	r3, r1
 80011fe:	491b      	ldr	r1, [pc, #108]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_RCC_OscConfig+0x4cc>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fb1f 	bl	800084c <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001212:	f7ff fb1b 	bl	800084c <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e03d      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x46a>
 8001230:	e035      	b.n	800129e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_RCC_OscConfig+0x4cc>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fb08 	bl	800084c <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff fb04 	bl	800084c <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e026      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_RCC_OscConfig+0x4c4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x498>
 800125e:	e01e      	b.n	800129e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d107      	bne.n	8001278 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e019      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
 800126c:	40021000 	.word	0x40021000
 8001270:	40007000 	.word	0x40007000
 8001274:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_OscConfig+0x500>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	429a      	cmp	r2, r3
 800128a:	d106      	bne.n	800129a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	429a      	cmp	r2, r3
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0d0      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d910      	bls.n	80012f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 0207 	bic.w	r2, r3, #7
 80012d6:	4965      	ldr	r1, [pc, #404]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012de:	4b63      	ldr	r3, [pc, #396]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e0b8      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a58      	ldr	r2, [pc, #352]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800132a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	494d      	ldr	r1, [pc, #308]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d040      	beq.n	80013cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d115      	bne.n	800138a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e07f      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d107      	bne.n	800137a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d109      	bne.n	800138a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e073      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e06b      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f023 0203 	bic.w	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4936      	ldr	r1, [pc, #216]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800139c:	f7ff fa56 	bl	800084c <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a4:	f7ff fa52 	bl	800084c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e053      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 020c 	and.w	r2, r3, #12
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d1eb      	bne.n	80013a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d210      	bcs.n	80013fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 0207 	bic.w	r2, r3, #7
 80013e2:	4922      	ldr	r1, [pc, #136]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e032      	b.n	8001462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4916      	ldr	r1, [pc, #88]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d009      	beq.n	800143a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	490e      	ldr	r1, [pc, #56]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800143a:	f000 f821 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 800143e:	4602      	mov	r2, r0
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <HAL_RCC_ClockConfig+0x1c8>)
 800144c:	5ccb      	ldrb	r3, [r1, r3]
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_RCC_ClockConfig+0x1cc>)
 8001454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_ClockConfig+0x1d0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f9b4 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000
 8001470:	40021000 	.word	0x40021000
 8001474:	08004510 	.word	0x08004510
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_RCC_GetSysClockFreq+0x94>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d002      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x30>
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d003      	beq.n	80014b6 <HAL_RCC_GetSysClockFreq+0x36>
 80014ae:	e027      	b.n	8001500 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_GetSysClockFreq+0x98>)
 80014b2:	613b      	str	r3, [r7, #16]
      break;
 80014b4:	e027      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	0c9b      	lsrs	r3, r3, #18
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
 80014c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d010      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_GetSysClockFreq+0x94>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0c5b      	lsrs	r3, r3, #17
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_RCC_GetSysClockFreq+0x98>)
 80014e2:	fb03 f202 	mul.w	r2, r3, r2
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e004      	b.n	80014fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	613b      	str	r3, [r7, #16]
      break;
 80014fe:	e002      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetSysClockFreq+0x98>)
 8001502:	613b      	str	r3, [r7, #16]
      break;
 8001504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001506:	693b      	ldr	r3, [r7, #16]
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	007a1200 	.word	0x007a1200
 800151c:	08004528 	.word	0x08004528
 8001520:	08004538 	.word	0x08004538
 8001524:	003d0900 	.word	0x003d0900

08001528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_RCC_GetHCLKFreq+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001540:	f7ff fff2 	bl	8001528 <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	08004520 	.word	0x08004520

08001564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001568:	f7ff ffde 	bl	8001528 <HAL_RCC_GetHCLKFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0adb      	lsrs	r3, r3, #11
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	4903      	ldr	r1, [pc, #12]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	08004520 	.word	0x08004520

0800158c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <RCC_Delay+0x34>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <RCC_Delay+0x38>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0a5b      	lsrs	r3, r3, #9
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015a8:	bf00      	nop
  }
  while (Delay --);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	60fa      	str	r2, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f9      	bne.n	80015a8 <RCC_Delay+0x1c>
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000000 	.word	0x20000000
 80015c4:	10624dd3 	.word	0x10624dd3

080015c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e042      	b.n	8001660 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff f862 	bl	80006b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800160a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f91d 	bl	800184c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b20      	cmp	r3, #32
 8001686:	d16d      	bne.n	8001764 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_UART_Transmit+0x2c>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e066      	b.n	8001766 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2221      	movs	r2, #33	; 0x21
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016a6:	f7ff f8d1 	bl	800084c <HAL_GetTick>
 80016aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c0:	d108      	bne.n	80016d4 <HAL_UART_Transmit+0x6c>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e003      	b.n	80016dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80016dc:	e02a      	b.n	8001734 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2200      	movs	r2, #0
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f840 	bl	800176e <UART_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e036      	b.n	8001766 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800170c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	3302      	adds	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	e007      	b.n	8001726 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	3301      	adds	r3, #1
 8001724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001738:	b29b      	uxth	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1cf      	bne.n	80016de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2200      	movs	r2, #0
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 f810 	bl	800176e <UART_WaitOnFlagUntilTimeout>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e006      	b.n	8001766 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001764:	2302      	movs	r3, #2
  }
}
 8001766:	4618      	mov	r0, r3
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b090      	sub	sp, #64	; 0x40
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4613      	mov	r3, r2
 800177c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800177e:	e050      	b.n	8001822 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001786:	d04c      	beq.n	8001822 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <UART_WaitOnFlagUntilTimeout+0x30>
 800178e:	f7ff f85d 	bl	800084c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800179a:	429a      	cmp	r2, r3
 800179c:	d241      	bcs.n	8001822 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	330c      	adds	r3, #12
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a8:	e853 3f00 	ldrex	r3, [r3]
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	330c      	adds	r3, #12
 80017bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017be:	637a      	str	r2, [r7, #52]	; 0x34
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c6:	e841 2300 	strex	r3, r2, [r1]
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e5      	bne.n	800179e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3314      	adds	r3, #20
 80017d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	e853 3f00 	ldrex	r3, [r3]
 80017e0:	613b      	str	r3, [r7, #16]
   return(result);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3314      	adds	r3, #20
 80017f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017f2:	623a      	str	r2, [r7, #32]
 80017f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f6:	69f9      	ldr	r1, [r7, #28]
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	e841 2300 	strex	r3, r2, [r1]
 80017fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1e5      	bne.n	80017d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2220      	movs	r2, #32
 8001812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e00f      	b.n	8001842 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4013      	ands	r3, r2
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	429a      	cmp	r2, r3
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	429a      	cmp	r2, r3
 800183e:	d09f      	beq.n	8001780 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3740      	adds	r7, #64	; 0x40
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	4313      	orrs	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001886:	f023 030c 	bic.w	r3, r3, #12
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	430b      	orrs	r3, r1
 8001892:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <UART_SetConfig+0x114>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d103      	bne.n	80018bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80018b4:	f7ff fe56 	bl	8001564 <HAL_RCC_GetPCLK2Freq>
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	e002      	b.n	80018c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80018bc:	f7ff fe3e 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80018c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009a      	lsls	r2, r3, #2
 80018cc:	441a      	add	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d8:	4a22      	ldr	r2, [pc, #136]	; (8001964 <UART_SetConfig+0x118>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	0119      	lsls	r1, r3, #4
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009a      	lsls	r2, r3, #2
 80018ec:	441a      	add	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <UART_SetConfig+0x118>)
 80018fa:	fba3 0302 	umull	r0, r3, r3, r2
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2064      	movs	r0, #100	; 0x64
 8001902:	fb00 f303 	mul.w	r3, r0, r3
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	3332      	adds	r3, #50	; 0x32
 800190c:	4a15      	ldr	r2, [pc, #84]	; (8001964 <UART_SetConfig+0x118>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001918:	4419      	add	r1, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	009a      	lsls	r2, r3, #2
 8001924:	441a      	add	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <UART_SetConfig+0x118>)
 8001932:	fba3 0302 	umull	r0, r3, r3, r2
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2064      	movs	r0, #100	; 0x64
 800193a:	fb00 f303 	mul.w	r3, r0, r3
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	3332      	adds	r3, #50	; 0x32
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <UART_SetConfig+0x118>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	f003 020f 	and.w	r2, r3, #15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	440a      	add	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40013800 	.word	0x40013800
 8001964:	51eb851f 	.word	0x51eb851f

08001968 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800196e:	f3ef 8305 	mrs	r3, IPSR
 8001972:	60bb      	str	r3, [r7, #8]
  return(result);
 8001974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800197a:	f3ef 8310 	mrs	r3, PRIMASK
 800197e:	607b      	str	r3, [r7, #4]
  return(result);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <osKernelInitialize+0x32>
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <osKernelInitialize+0x60>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d109      	bne.n	80019a2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800198e:	f3ef 8311 	mrs	r3, BASEPRI
 8001992:	603b      	str	r3, [r7, #0]
  return(result);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800199a:	f06f 0305 	mvn.w	r3, #5
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e00c      	b.n	80019bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <osKernelInitialize+0x60>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <osKernelInitialize+0x60>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e002      	b.n	80019bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019bc:	68fb      	ldr	r3, [r7, #12]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000094 	.word	0x20000094

080019cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019d2:	f3ef 8305 	mrs	r3, IPSR
 80019d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80019d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019de:	f3ef 8310 	mrs	r3, PRIMASK
 80019e2:	607b      	str	r3, [r7, #4]
  return(result);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <osKernelStart+0x32>
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <osKernelStart+0x64>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d109      	bne.n	8001a06 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019f2:	f3ef 8311 	mrs	r3, BASEPRI
 80019f6:	603b      	str	r3, [r7, #0]
  return(result);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <osKernelStart+0x3a>
    stat = osErrorISR;
 80019fe:	f06f 0305 	mvn.w	r3, #5
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e00e      	b.n	8001a24 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <osKernelStart+0x64>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <osKernelStart+0x64>)
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a14:	f001 f878 	bl	8002b08 <vTaskStartScheduler>
      stat = osOK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e002      	b.n	8001a24 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a24:	68fb      	ldr	r3, [r7, #12]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000094 	.word	0x20000094

08001a34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b092      	sub	sp, #72	; 0x48
 8001a38:	af04      	add	r7, sp, #16
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a44:	f3ef 8305 	mrs	r3, IPSR
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 8094 	bne.w	8001b7a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a52:	f3ef 8310 	mrs	r3, PRIMASK
 8001a56:	623b      	str	r3, [r7, #32]
  return(result);
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 808d 	bne.w	8001b7a <osThreadNew+0x146>
 8001a60:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <osThreadNew+0x150>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d106      	bne.n	8001a76 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a68:	f3ef 8311 	mrs	r3, BASEPRI
 8001a6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 8082 	bne.w	8001b7a <osThreadNew+0x146>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d07e      	beq.n	8001b7a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001a80:	2318      	movs	r3, #24
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001a84:	2300      	movs	r3, #0
 8001a86:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001a88:	f107 031b 	add.w	r3, r7, #27
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d045      	beq.n	8001b26 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <osThreadNew+0x74>
        name = attr->name;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <osThreadNew+0x9a>
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	2b38      	cmp	r3, #56	; 0x38
 8001ac0:	d805      	bhi.n	8001ace <osThreadNew+0x9a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <osThreadNew+0x9e>
        return (NULL);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e054      	b.n	8001b7c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00e      	beq.n	8001b08 <osThreadNew+0xd4>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b5b      	cmp	r3, #91	; 0x5b
 8001af0:	d90a      	bls.n	8001b08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <osThreadNew+0xd4>
        mem = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b06:	e010      	b.n	8001b2a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <osThreadNew+0xf6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <osThreadNew+0xf6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d104      	bne.n	8001b2a <osThreadNew+0xf6>
          mem = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b24:	e001      	b.n	8001b2a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d110      	bne.n	8001b52 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b38:	9202      	str	r2, [sp, #8]
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fe12 	bl	8002770 <xTaskCreateStatic>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e013      	b.n	8001b7a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d110      	bne.n	8001b7a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fe5c 	bl	8002828 <xTaskCreate>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <osThreadNew+0x146>
          hTask = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b7a:	697b      	ldr	r3, [r7, #20]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3738      	adds	r7, #56	; 0x38
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000094 	.word	0x20000094

08001b88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b90:	f3ef 8305 	mrs	r3, IPSR
 8001b94:	613b      	str	r3, [r7, #16]
  return(result);
 8001b96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10f      	bne.n	8001bbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <osDelay+0x34>
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <osDelay+0x58>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d109      	bne.n	8001bc4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8001bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <osDelay+0x3c>
    stat = osErrorISR;
 8001bbc:	f06f 0305 	mvn.w	r3, #5
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e007      	b.n	8001bd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 ff66 	bl	8002aa0 <vTaskDelay>
    }
  }

  return (stat);
 8001bd4:	697b      	ldr	r3, [r7, #20]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000094 	.word	0x20000094

08001be4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <vApplicationGetIdleTaskMemory+0x28>)
 8001bf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <vApplicationGetIdleTaskMemory+0x2c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000098 	.word	0x20000098
 8001c10:	200000f4 	.word	0x200000f4

08001c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8001c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <vApplicationGetTimerTaskMemory+0x30>)
 8001c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c32:	601a      	str	r2, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200002f4 	.word	0x200002f4
 8001c44:	20000350 	.word	0x20000350

08001c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f103 0208 	add.w	r2, r3, #8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 0208 	add.w	r2, r3, #8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 0208 	add.w	r2, r3, #8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfa:	d103      	bne.n	8001d04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e00c      	b.n	8001d1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3308      	adds	r3, #8
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e002      	b.n	8001d12 <vListInsert+0x2e>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d2f6      	bcs.n	8001d0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6892      	ldr	r2, [r2, #8]
 8001d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6852      	ldr	r2, [r2, #4]
 8001d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d103      	bne.n	8001d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1e5a      	subs	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10a      	bne.n	8001dd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001dce:	bf00      	nop
 8001dd0:	e7fe      	b.n	8001dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001dd2:	f001 ffcb 	bl	8003d6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	441a      	add	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	3b01      	subs	r3, #1
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	441a      	add	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	22ff      	movs	r2, #255	; 0xff
 8001e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	22ff      	movs	r2, #255	; 0xff
 8001e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d114      	bne.n	8001e52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01a      	beq.n	8001e66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3310      	adds	r3, #16
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 f8f1 	bl	800301c <xTaskRemoveFromEventList>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d012      	beq.n	8001e66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <xQueueGenericReset+0xcc>)
 8001e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	e009      	b.n	8001e66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3310      	adds	r3, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fef6 	bl	8001c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3324      	adds	r3, #36	; 0x24
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fef1 	bl	8001c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e66:	f001 ffb1 	bl	8003dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	; 0x38
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e9e:	bf00      	nop
 8001ea0:	e7fe      	b.n	8001ea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eac:	f383 8811 	msr	BASEPRI, r3
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001eba:	bf00      	nop
 8001ebc:	e7fe      	b.n	8001ebc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <xQueueGenericCreateStatic+0x52>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <xQueueGenericCreateStatic+0x56>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <xQueueGenericCreateStatic+0x58>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	623b      	str	r3, [r7, #32]
}
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <xQueueGenericCreateStatic+0x7e>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <xQueueGenericCreateStatic+0x82>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <xQueueGenericCreateStatic+0x84>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	61fb      	str	r3, [r7, #28]
}
 8001f12:	bf00      	nop
 8001f14:	e7fe      	b.n	8001f14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f16:	2350      	movs	r3, #80	; 0x50
 8001f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b50      	cmp	r3, #80	; 0x50
 8001f1e:	d00a      	beq.n	8001f36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	61bb      	str	r3, [r7, #24]
}
 8001f32:	bf00      	nop
 8001f34:	e7fe      	b.n	8001f34 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f805 	bl	8001f66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e002      	b.n	8001f88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f94:	2101      	movs	r1, #1
 8001f96:	69b8      	ldr	r0, [r7, #24]
 8001f98:	f7ff ff06 	bl	8001da8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	; 0x38
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <xQueueGenericSend+0x32>
	__asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001fda:	bf00      	nop
 8001fdc:	e7fe      	b.n	8001fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <xQueueGenericSend+0x40>
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <xQueueGenericSend+0x44>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <xQueueGenericSend+0x46>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10a      	bne.n	800200c <xQueueGenericSend+0x60>
	__asm volatile
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002008:	bf00      	nop
 800200a:	e7fe      	b.n	800200a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d103      	bne.n	800201a <xQueueGenericSend+0x6e>
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <xQueueGenericSend+0x72>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <xQueueGenericSend+0x74>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <xQueueGenericSend+0x8e>
	__asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	623b      	str	r3, [r7, #32]
}
 8002036:	bf00      	nop
 8002038:	e7fe      	b.n	8002038 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800203a:	f001 f9b1 	bl	80033a0 <xTaskGetSchedulerState>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <xQueueGenericSend+0x9e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <xQueueGenericSend+0xa2>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <xQueueGenericSend+0xa4>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <xQueueGenericSend+0xbe>
	__asm volatile
 8002054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	61fb      	str	r3, [r7, #28]
}
 8002066:	bf00      	nop
 8002068:	e7fe      	b.n	8002068 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800206a:	f001 fe7f 	bl	8003d6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <xQueueGenericSend+0xd4>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d129      	bne.n	80020d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002086:	f000 fa07 	bl	8002498 <prvCopyDataToQueue>
 800208a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	3324      	adds	r3, #36	; 0x24
 8002098:	4618      	mov	r0, r3
 800209a:	f000 ffbf 	bl	800301c <xTaskRemoveFromEventList>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <xQueueGenericSend+0x1f8>)
 80020a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	e00a      	b.n	80020cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <xQueueGenericSend+0x1f8>)
 80020be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020cc:	f001 fe7e 	bl	8003dcc <vPortExitCritical>
				return pdPASS;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e063      	b.n	800219c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020da:	f001 fe77 	bl	8003dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	e05c      	b.n	800219c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fff9 	bl	80030e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020f6:	f001 fe69 	bl	8003dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020fa:	f000 fd6b 	bl	8002bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020fe:	f001 fe35 	bl	8003d6c <vPortEnterCritical>
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002108:	b25b      	sxtb	r3, r3
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210e:	d103      	bne.n	8002118 <xQueueGenericSend+0x16c>
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800211e:	b25b      	sxtb	r3, r3
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d103      	bne.n	800212e <xQueueGenericSend+0x182>
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800212e:	f001 fe4d 	bl	8003dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002132:	1d3a      	adds	r2, r7, #4
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f000 ffe8 	bl	8003110 <xTaskCheckForTimeOut>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d124      	bne.n	8002190 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002148:	f000 fa9e 	bl	8002688 <prvIsQueueFull>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d018      	beq.n	8002184 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	3310      	adds	r3, #16
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f000 ff0e 	bl	8002f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002162:	f000 fa29 	bl	80025b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002166:	f000 fd43 	bl	8002bf0 <xTaskResumeAll>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f af7c 	bne.w	800206a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <xQueueGenericSend+0x1f8>)
 8002174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	e772      	b.n	800206a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002186:	f000 fa17 	bl	80025b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800218a:	f000 fd31 	bl	8002bf0 <xTaskResumeAll>
 800218e:	e76c      	b.n	800206a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002192:	f000 fa11 	bl	80025b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002196:	f000 fd2b 	bl	8002bf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800219a:	2300      	movs	r3, #0
		}
	}
}
 800219c:	4618      	mov	r0, r3
 800219e:	3738      	adds	r7, #56	; 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	e000ed04 	.word	0xe000ed04

080021a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021d2:	bf00      	nop
 80021d4:	e7fe      	b.n	80021d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <xQueueGenericSendFromISR+0x3c>
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <xQueueGenericSendFromISR+0x40>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <xQueueGenericSendFromISR+0x42>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80021ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	623b      	str	r3, [r7, #32]
}
 8002200:	bf00      	nop
 8002202:	e7fe      	b.n	8002202 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d103      	bne.n	8002212 <xQueueGenericSendFromISR+0x6a>
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <xQueueGenericSendFromISR+0x6e>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <xQueueGenericSendFromISR+0x70>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	61fb      	str	r3, [r7, #28]
}
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002232:	f001 fe5d 	bl	8003ef0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002236:	f3ef 8211 	mrs	r2, BASEPRI
 800223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	61ba      	str	r2, [r7, #24]
 800224c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800224e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <xQueueGenericSendFromISR+0xbc>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d12c      	bne.n	80022be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800226a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002274:	f000 f910 	bl	8002498 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002278:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d112      	bne.n	80022a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	3324      	adds	r3, #36	; 0x24
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fec4 	bl	800301c <xTaskRemoveFromEventList>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e007      	b.n	80022b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022ac:	3301      	adds	r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	b25a      	sxtb	r2, r3
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80022b8:	2301      	movs	r3, #1
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80022bc:	e001      	b.n	80022c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3738      	adds	r7, #56	; 0x38
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	; 0x30
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <xQueueReceive+0x30>
	__asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	623b      	str	r3, [r7, #32]
}
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <xQueueReceive+0x3e>
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <xQueueReceive+0x42>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <xQueueReceive+0x44>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <xQueueReceive+0x5e>
	__asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	61fb      	str	r3, [r7, #28]
}
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002336:	f001 f833 	bl	80033a0 <xTaskGetSchedulerState>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <xQueueReceive+0x6e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <xQueueReceive+0x72>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <xQueueReceive+0x74>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <xQueueReceive+0x8e>
	__asm volatile
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	61bb      	str	r3, [r7, #24]
}
 8002362:	bf00      	nop
 8002364:	e7fe      	b.n	8002364 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002366:	f001 fd01 	bl	8003d6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01f      	beq.n	80023b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800237a:	f000 f8f7 	bl	800256c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00f      	beq.n	80023ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	3310      	adds	r3, #16
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fe42 	bl	800301c <xTaskRemoveFromEventList>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <xQueueReceive+0x1bc>)
 80023a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023ae:	f001 fd0d 	bl	8003dcc <vPortExitCritical>
				return pdPASS;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e069      	b.n	800248a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023bc:	f001 fd06 	bl	8003dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e062      	b.n	800248a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023ca:	f107 0310 	add.w	r3, r7, #16
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fe88 	bl	80030e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023d8:	f001 fcf8 	bl	8003dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023dc:	f000 fbfa 	bl	8002bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023e0:	f001 fcc4 	bl	8003d6c <vPortEnterCritical>
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d103      	bne.n	80023fa <xQueueReceive+0x122>
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002400:	b25b      	sxtb	r3, r3
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d103      	bne.n	8002410 <xQueueReceive+0x138>
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002410:	f001 fcdc 	bl	8003dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002414:	1d3a      	adds	r2, r7, #4
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fe77 	bl	8003110 <xTaskCheckForTimeOut>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d123      	bne.n	8002470 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800242a:	f000 f917 	bl	800265c <prvIsQueueEmpty>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d017      	beq.n	8002464 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	3324      	adds	r3, #36	; 0x24
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fd9d 	bl	8002f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002444:	f000 f8b8 	bl	80025b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002448:	f000 fbd2 	bl	8002bf0 <xTaskResumeAll>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d189      	bne.n	8002366 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <xQueueReceive+0x1bc>)
 8002454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	e780      	b.n	8002366 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002466:	f000 f8a7 	bl	80025b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800246a:	f000 fbc1 	bl	8002bf0 <xTaskResumeAll>
 800246e:	e77a      	b.n	8002366 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002472:	f000 f8a1 	bl	80025b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002476:	f000 fbbb 	bl	8002bf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800247a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800247c:	f000 f8ee 	bl	800265c <prvIsQueueEmpty>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f43f af6f 	beq.w	8002366 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800248a:	4618      	mov	r0, r3
 800248c:	3730      	adds	r7, #48	; 0x30
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000ed04 	.word	0xe000ed04

08002498 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d14d      	bne.n	800255a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 ff8a 	bl	80033dc <xTaskPriorityDisinherit>
 80024c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	e043      	b.n	800255a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d119      	bne.n	800250c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6898      	ldr	r0, [r3, #8]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	461a      	mov	r2, r3
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	f001 ff3e 	bl	8004364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	441a      	add	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d32b      	bcc.n	800255a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e026      	b.n	800255a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68d8      	ldr	r0, [r3, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	461a      	mov	r2, r3
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	f001 ff24 	bl	8004364 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	425b      	negs	r3, r3
 8002526:	441a      	add	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	425b      	negs	r3, r3
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d105      	bne.n	800255a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3b01      	subs	r3, #1
 8002558:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002562:	697b      	ldr	r3, [r7, #20]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d018      	beq.n	80025b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	441a      	add	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d303      	bcc.n	80025a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68d9      	ldr	r1, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	461a      	mov	r2, r3
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f001 feda 	bl	8004364 <memcpy>
	}
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025c0:	f001 fbd4 	bl	8003d6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025cc:	e011      	b.n	80025f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3324      	adds	r3, #36	; 0x24
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fd1e 	bl	800301c <xTaskRemoveFromEventList>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025e6:	f000 fdf5 	bl	80031d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dce9      	bgt.n	80025ce <prvUnlockQueue+0x16>
 80025fa:	e000      	b.n	80025fe <prvUnlockQueue+0x46>
					break;
 80025fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002606:	f001 fbe1 	bl	8003dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800260a:	f001 fbaf 	bl	8003d6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002614:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002616:	e011      	b.n	800263c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3310      	adds	r3, #16
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fcf9 	bl	800301c <xTaskRemoveFromEventList>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002630:	f000 fdd0 	bl	80031d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	3b01      	subs	r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800263c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002640:	2b00      	cmp	r3, #0
 8002642:	dce9      	bgt.n	8002618 <prvUnlockQueue+0x60>
 8002644:	e000      	b.n	8002648 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002646:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002650:	f001 fbbc 	bl	8003dcc <vPortExitCritical>
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002664:	f001 fb82 	bl	8003d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002670:	2301      	movs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e001      	b.n	800267a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800267a:	f001 fba7 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002690:	f001 fb6c 	bl	8003d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	429a      	cmp	r2, r3
 800269e:	d102      	bne.n	80026a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026a0:	2301      	movs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e001      	b.n	80026aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026aa:	f001 fb8f 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e014      	b.n	80026f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <vQueueAddToRegistry+0x4c>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026d4:	490b      	ldr	r1, [pc, #44]	; (8002704 <vQueueAddToRegistry+0x4c>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <vQueueAddToRegistry+0x4c>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80026ea:	e006      	b.n	80026fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	d9e7      	bls.n	80026c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	20000750 	.word	0x20000750

08002708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002718:	f001 fb28 	bl	8003d6c <vPortEnterCritical>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002722:	b25b      	sxtb	r3, r3
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d103      	bne.n	8002732 <vQueueWaitForMessageRestricted+0x2a>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002738:	b25b      	sxtb	r3, r3
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d103      	bne.n	8002748 <vQueueWaitForMessageRestricted+0x40>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002748:	f001 fb40 	bl	8003dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3324      	adds	r3, #36	; 0x24
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fc31 	bl	8002fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	f7ff ff28 	bl	80025b8 <prvUnlockQueue>
	}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af04      	add	r7, sp, #16
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	623b      	str	r3, [r7, #32]
}
 8002796:	bf00      	nop
 8002798:	e7fe      	b.n	8002798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	61fb      	str	r3, [r7, #28]
}
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027b6:	235c      	movs	r3, #92	; 0x5c
 80027b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b5c      	cmp	r3, #92	; 0x5c
 80027be:	d00a      	beq.n	80027d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61bb      	str	r3, [r7, #24]
}
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01e      	beq.n	800281a <xTaskCreateStatic+0xaa>
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01b      	beq.n	800281a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027f4:	2300      	movs	r3, #0
 80027f6:	9303      	str	r3, [sp, #12]
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f850 	bl	80028b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002814:	f000 f8d4 	bl	80029c0 <prvAddNewTaskToReadyList>
 8002818:	e001      	b.n	800281e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800281e:	697b      	ldr	r3, [r7, #20]
	}
 8002820:	4618      	mov	r0, r3
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af04      	add	r7, sp, #16
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fb95 	bl	8003f6c <pvPortMalloc>
 8002842:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00e      	beq.n	8002868 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800284a:	205c      	movs	r0, #92	; 0x5c
 800284c:	f001 fb8e 	bl	8003f6c <pvPortMalloc>
 8002850:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
 800285e:	e005      	b.n	800286c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002860:	6978      	ldr	r0, [r7, #20]
 8002862:	f001 fc47 	bl	80040f4 <vPortFree>
 8002866:	e001      	b.n	800286c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d017      	beq.n	80028a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	2300      	movs	r3, #0
 800287e:	9303      	str	r3, [sp, #12]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f80e 	bl	80028b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002896:	69f8      	ldr	r0, [r7, #28]
 8002898:	f000 f892 	bl	80029c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800289c:	2301      	movs	r3, #1
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e002      	b.n	80028a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028a8:	69bb      	ldr	r3, [r7, #24]
	}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b088      	sub	sp, #32
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	461a      	mov	r2, r3
 80028ca:	21a5      	movs	r1, #165	; 0xa5
 80028cc:	f001 fd58 	bl	8004380 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028da:	3b01      	subs	r3, #1
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f023 0307 	bic.w	r3, r3, #7
 80028e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <prvInitialiseNewTask+0x58>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	617b      	str	r3, [r7, #20]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e012      	b.n	8002936 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	7819      	ldrb	r1, [r3, #0]
 8002918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	3334      	adds	r3, #52	; 0x34
 8002920:	460a      	mov	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3301      	adds	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b0f      	cmp	r3, #15
 800293a:	d9e9      	bls.n	8002910 <prvInitialiseNewTask+0x5e>
 800293c:	e000      	b.n	8002940 <prvInitialiseNewTask+0x8e>
		{
			break;
 800293e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	2b37      	cmp	r3, #55	; 0x37
 800294c:	d901      	bls.n	8002952 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800294e:	2337      	movs	r3, #55	; 0x37
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	2200      	movs	r2, #0
 8002962:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	3304      	adds	r3, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f98c 	bl	8001c86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	3318      	adds	r3, #24
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f987 	bl	8001c86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	2200      	movs	r2, #0
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	68f9      	ldr	r1, [r7, #12]
 80029a0:	69b8      	ldr	r0, [r7, #24]
 80029a2:	f001 f8ef 	bl	8003b84 <pxPortInitialiseStack>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029b8:	bf00      	nop
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029c8:	f001 f9d0 	bl	8003d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 80029d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029d6:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <prvAddNewTaskToReadyList+0xc8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <prvAddNewTaskToReadyList+0xc8>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d110      	bne.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029ec:	f000 fc16 	bl	800321c <prvInitialiseTaskLists>
 80029f0:	e00d      	b.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <prvAddNewTaskToReadyList+0xcc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029fa:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <prvAddNewTaskToReadyList+0xc8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d802      	bhi.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <prvAddNewTaskToReadyList+0xc8>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <prvAddNewTaskToReadyList+0xd0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <prvAddNewTaskToReadyList+0xd0>)
 8002a16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <prvAddNewTaskToReadyList+0xd0>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <prvAddNewTaskToReadyList+0xd4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d903      	bls.n	8002a34 <prvAddNewTaskToReadyList+0x74>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <prvAddNewTaskToReadyList+0xd4>)
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <prvAddNewTaskToReadyList+0xd8>)
 8002a42:	441a      	add	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f7ff f927 	bl	8001c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a50:	f001 f9bc 	bl	8003dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <prvAddNewTaskToReadyList+0xcc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <prvAddNewTaskToReadyList+0xc8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d207      	bcs.n	8002a7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <prvAddNewTaskToReadyList+0xdc>)
 8002a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000c64 	.word	0x20000c64
 8002a88:	20000790 	.word	0x20000790
 8002a8c:	20000c70 	.word	0x20000c70
 8002a90:	20000c80 	.word	0x20000c80
 8002a94:	20000c6c 	.word	0x20000c6c
 8002a98:	20000794 	.word	0x20000794
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d017      	beq.n	8002ae2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <vTaskDelay+0x60>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <vTaskDelay+0x30>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	60bb      	str	r3, [r7, #8]
}
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ad0:	f000 f880 	bl	8002bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fcee 	bl	80034b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002adc:	f000 f888 	bl	8002bf0 <xTaskResumeAll>
 8002ae0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <vTaskDelay+0x64>)
 8002aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000c8c 	.word	0x20000c8c
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b16:	463a      	mov	r2, r7
 8002b18:	1d39      	adds	r1, r7, #4
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f860 	bl	8001be4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	9202      	str	r2, [sp, #8]
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	460a      	mov	r2, r1
 8002b36:	4921      	ldr	r1, [pc, #132]	; (8002bbc <vTaskStartScheduler+0xb4>)
 8002b38:	4821      	ldr	r0, [pc, #132]	; (8002bc0 <vTaskStartScheduler+0xb8>)
 8002b3a:	f7ff fe19 	bl	8002770 <xTaskCreateStatic>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <vTaskStartScheduler+0xbc>)
 8002b42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <vTaskStartScheduler+0xbc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e001      	b.n	8002b56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d102      	bne.n	8002b62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b5c:	f000 fd00 	bl	8003560 <xTimerCreateTimerTask>
 8002b60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d116      	bne.n	8002b96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	613b      	str	r3, [r7, #16]
}
 8002b7a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <vTaskStartScheduler+0xc0>)
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <vTaskStartScheduler+0xc4>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <vTaskStartScheduler+0xc8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b90:	f001 f87a 	bl	8003c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b94:	e00e      	b.n	8002bb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d10a      	bne.n	8002bb4 <vTaskStartScheduler+0xac>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	60fb      	str	r3, [r7, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <vTaskStartScheduler+0xaa>
}
 8002bb4:	bf00      	nop
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	080043fc 	.word	0x080043fc
 8002bc0:	080031ed 	.word	0x080031ed
 8002bc4:	20000c88 	.word	0x20000c88
 8002bc8:	20000c84 	.word	0x20000c84
 8002bcc:	20000c70 	.word	0x20000c70
 8002bd0:	20000c68 	.word	0x20000c68

08002bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <vTaskSuspendAll+0x18>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	4a03      	ldr	r2, [pc, #12]	; (8002bec <vTaskSuspendAll+0x18>)
 8002be0:	6013      	str	r3, [r2, #0]
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000c8c 	.word	0x20000c8c

08002bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bfe:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <xTaskResumeAll+0x118>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <xTaskResumeAll+0x2c>
	__asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	603b      	str	r3, [r7, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	e7fe      	b.n	8002c1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c1c:	f001 f8a6 	bl	8003d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <xTaskResumeAll+0x118>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <xTaskResumeAll+0x118>)
 8002c28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <xTaskResumeAll+0x118>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d162      	bne.n	8002cf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <xTaskResumeAll+0x11c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d05e      	beq.n	8002cf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c3a:	e02f      	b.n	8002c9c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <xTaskResumeAll+0x120>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3318      	adds	r3, #24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f883 	bl	8001d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3304      	adds	r3, #4
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f87e 	bl	8001d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <xTaskResumeAll+0x124>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d903      	bls.n	8002c6c <xTaskResumeAll+0x7c>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <xTaskResumeAll+0x124>)
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <xTaskResumeAll+0x128>)
 8002c7a:	441a      	add	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f7ff f80b 	bl	8001c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <xTaskResumeAll+0x12c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <xTaskResumeAll+0x130>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <xTaskResumeAll+0x120>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1cb      	bne.n	8002c3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002caa:	f000 fb55 	bl	8003358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <xTaskResumeAll+0x134>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cba:	f000 f845 	bl	8002d48 <xTaskIncrementTick>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <xTaskResumeAll+0x130>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f1      	bne.n	8002cba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <xTaskResumeAll+0x134>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <xTaskResumeAll+0x130>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <xTaskResumeAll+0x138>)
 8002cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cf8:	f001 f868 	bl	8003dcc <vPortExitCritical>

	return xAlreadyYielded;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000c8c 	.word	0x20000c8c
 8002d0c:	20000c64 	.word	0x20000c64
 8002d10:	20000c24 	.word	0x20000c24
 8002d14:	20000c6c 	.word	0x20000c6c
 8002d18:	20000794 	.word	0x20000794
 8002d1c:	20000790 	.word	0x20000790
 8002d20:	20000c78 	.word	0x20000c78
 8002d24:	20000c74 	.word	0x20000c74
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <xTaskGetTickCount+0x18>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d38:	687b      	ldr	r3, [r7, #4]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000c68 	.word	0x20000c68

08002d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d52:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <xTaskIncrementTick+0x150>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 808e 	bne.w	8002e78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d5c:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <xTaskIncrementTick+0x154>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d64:	4a4d      	ldr	r2, [pc, #308]	; (8002e9c <xTaskIncrementTick+0x154>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d120      	bne.n	8002db2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <xTaskIncrementTick+0x158>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	603b      	str	r3, [r7, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <xTaskIncrementTick+0x46>
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <xTaskIncrementTick+0x158>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <xTaskIncrementTick+0x15c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <xTaskIncrementTick+0x158>)
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4a41      	ldr	r2, [pc, #260]	; (8002ea4 <xTaskIncrementTick+0x15c>)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <xTaskIncrementTick+0x160>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <xTaskIncrementTick+0x160>)
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	f000 fad3 	bl	8003358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <xTaskIncrementTick+0x164>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d34e      	bcc.n	8002e5a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <xTaskIncrementTick+0x158>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <xTaskIncrementTick+0x82>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <xTaskIncrementTick+0x84>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd0:	4b36      	ldr	r3, [pc, #216]	; (8002eac <xTaskIncrementTick+0x164>)
 8002dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd6:	601a      	str	r2, [r3, #0]
					break;
 8002dd8:	e03f      	b.n	8002e5a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dda:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <xTaskIncrementTick+0x158>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d203      	bcs.n	8002dfa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002df2:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <xTaskIncrementTick+0x164>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6013      	str	r3, [r2, #0]
						break;
 8002df8:	e02f      	b.n	8002e5a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe ffa8 	bl	8001d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3318      	adds	r3, #24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe ff9f 	bl	8001d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <xTaskIncrementTick+0x168>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d903      	bls.n	8002e2a <xTaskIncrementTick+0xe2>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <xTaskIncrementTick+0x168>)
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <xTaskIncrementTick+0x16c>)
 8002e38:	441a      	add	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f7fe ff2c 	bl	8001c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <xTaskIncrementTick+0x170>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3b3      	bcc.n	8002dbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e58:	e7b0      	b.n	8002dbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <xTaskIncrementTick+0x170>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	4914      	ldr	r1, [pc, #80]	; (8002eb4 <xTaskIncrementTick+0x16c>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d907      	bls.n	8002e82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e004      	b.n	8002e82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <xTaskIncrementTick+0x174>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <xTaskIncrementTick+0x174>)
 8002e80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <xTaskIncrementTick+0x178>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e8e:	697b      	ldr	r3, [r7, #20]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000c8c 	.word	0x20000c8c
 8002e9c:	20000c68 	.word	0x20000c68
 8002ea0:	20000c1c 	.word	0x20000c1c
 8002ea4:	20000c20 	.word	0x20000c20
 8002ea8:	20000c7c 	.word	0x20000c7c
 8002eac:	20000c84 	.word	0x20000c84
 8002eb0:	20000c6c 	.word	0x20000c6c
 8002eb4:	20000794 	.word	0x20000794
 8002eb8:	20000790 	.word	0x20000790
 8002ebc:	20000c74 	.word	0x20000c74
 8002ec0:	20000c78 	.word	0x20000c78

08002ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eca:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <vTaskSwitchContext+0xa4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <vTaskSwitchContext+0xa8>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ed8:	e041      	b.n	8002f5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <vTaskSwitchContext+0xa8>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <vTaskSwitchContext+0xac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e010      	b.n	8002f0a <vTaskSwitchContext+0x46>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <vTaskSwitchContext+0x40>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	607b      	str	r3, [r7, #4]
}
 8002f00:	bf00      	nop
 8002f02:	e7fe      	b.n	8002f02 <vTaskSwitchContext+0x3e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	491a      	ldr	r1, [pc, #104]	; (8002f74 <vTaskSwitchContext+0xb0>)
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0e4      	beq.n	8002ee8 <vTaskSwitchContext+0x24>
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <vTaskSwitchContext+0xb0>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d104      	bne.n	8002f4e <vTaskSwitchContext+0x8a>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <vTaskSwitchContext+0xb4>)
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <vTaskSwitchContext+0xac>)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6013      	str	r3, [r2, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000c8c 	.word	0x20000c8c
 8002f6c:	20000c78 	.word	0x20000c78
 8002f70:	20000c6c 	.word	0x20000c6c
 8002f74:	20000794 	.word	0x20000794
 8002f78:	20000790 	.word	0x20000790

08002f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	60fb      	str	r3, [r7, #12]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <vTaskPlaceOnEventList+0x44>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fe9a 	bl	8001ce4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	6838      	ldr	r0, [r7, #0]
 8002fb4:	f000 fa80 	bl	80034b8 <prvAddCurrentTaskToDelayedList>
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000790 	.word	0x20000790

08002fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	617b      	str	r3, [r7, #20]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <vTaskPlaceOnEventListRestricted+0x54>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7fe fe52 	bl	8001c9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f000 fa55 	bl	80034b8 <prvAddCurrentTaskToDelayedList>
	}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000790 	.word	0x20000790

0800301c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60fb      	str	r3, [r7, #12]
}
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	3318      	adds	r3, #24
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fe81 	bl	8001d54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <xTaskRemoveFromEventList+0xb0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11d      	bne.n	8003096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	3304      	adds	r3, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fe78 	bl	8001d54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <xTaskRemoveFromEventList+0xb4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d903      	bls.n	8003078 <xTaskRemoveFromEventList+0x5c>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <xTaskRemoveFromEventList+0xb4>)
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <xTaskRemoveFromEventList+0xb8>)
 8003086:	441a      	add	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fe fe05 	bl	8001c9e <vListInsertEnd>
 8003094:	e005      	b.n	80030a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3318      	adds	r3, #24
 800309a:	4619      	mov	r1, r3
 800309c:	480e      	ldr	r0, [pc, #56]	; (80030d8 <xTaskRemoveFromEventList+0xbc>)
 800309e:	f7fe fdfe 	bl	8001c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <xTaskRemoveFromEventList+0xc0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d905      	bls.n	80030bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <xTaskRemoveFromEventList+0xc4>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e001      	b.n	80030c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80030c0:	697b      	ldr	r3, [r7, #20]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000c8c 	.word	0x20000c8c
 80030d0:	20000c6c 	.word	0x20000c6c
 80030d4:	20000794 	.word	0x20000794
 80030d8:	20000c24 	.word	0x20000c24
 80030dc:	20000790 	.word	0x20000790
 80030e0:	20000c78 	.word	0x20000c78

080030e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <vTaskInternalSetTimeOutState+0x24>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <vTaskInternalSetTimeOutState+0x28>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000c7c 	.word	0x20000c7c
 800310c:	20000c68 	.word	0x20000c68

08003110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	613b      	str	r3, [r7, #16]
}
 8003132:	bf00      	nop
 8003134:	e7fe      	b.n	8003134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60fb      	str	r3, [r7, #12]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003152:	f000 fe0b 	bl	8003d6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <xTaskCheckForTimeOut+0xbc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d102      	bne.n	8003176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	e023      	b.n	80031be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <xTaskCheckForTimeOut+0xc0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d007      	beq.n	8003192 <xTaskCheckForTimeOut+0x82>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	e015      	b.n	80031be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d20b      	bcs.n	80031b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff9b 	bl	80030e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e004      	b.n	80031be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80031be:	f000 fe05 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 80031c2:	69fb      	ldr	r3, [r7, #28]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000c68 	.word	0x20000c68
 80031d0:	20000c7c 	.word	0x20000c7c

080031d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <vTaskMissedYield+0x14>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000c78 	.word	0x20000c78

080031ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031f4:	f000 f852 	bl	800329c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <prvIdleTask+0x28>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d9f9      	bls.n	80031f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <prvIdleTask+0x2c>)
 8003202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003210:	e7f0      	b.n	80031f4 <prvIdleTask+0x8>
 8003212:	bf00      	nop
 8003214:	20000794 	.word	0x20000794
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	e00c      	b.n	8003242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a12      	ldr	r2, [pc, #72]	; (800327c <prvInitialiseTaskLists+0x60>)
 8003234:	4413      	add	r3, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fd06 	bl	8001c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3301      	adds	r3, #1
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b37      	cmp	r3, #55	; 0x37
 8003246:	d9ef      	bls.n	8003228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003248:	480d      	ldr	r0, [pc, #52]	; (8003280 <prvInitialiseTaskLists+0x64>)
 800324a:	f7fe fcfd 	bl	8001c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800324e:	480d      	ldr	r0, [pc, #52]	; (8003284 <prvInitialiseTaskLists+0x68>)
 8003250:	f7fe fcfa 	bl	8001c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003254:	480c      	ldr	r0, [pc, #48]	; (8003288 <prvInitialiseTaskLists+0x6c>)
 8003256:	f7fe fcf7 	bl	8001c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800325a:	480c      	ldr	r0, [pc, #48]	; (800328c <prvInitialiseTaskLists+0x70>)
 800325c:	f7fe fcf4 	bl	8001c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <prvInitialiseTaskLists+0x74>)
 8003262:	f7fe fcf1 	bl	8001c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <prvInitialiseTaskLists+0x78>)
 8003268:	4a05      	ldr	r2, [pc, #20]	; (8003280 <prvInitialiseTaskLists+0x64>)
 800326a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <prvInitialiseTaskLists+0x7c>)
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <prvInitialiseTaskLists+0x68>)
 8003270:	601a      	str	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000794 	.word	0x20000794
 8003280:	20000bf4 	.word	0x20000bf4
 8003284:	20000c08 	.word	0x20000c08
 8003288:	20000c24 	.word	0x20000c24
 800328c:	20000c38 	.word	0x20000c38
 8003290:	20000c50 	.word	0x20000c50
 8003294:	20000c1c 	.word	0x20000c1c
 8003298:	20000c20 	.word	0x20000c20

0800329c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032a2:	e019      	b.n	80032d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032a4:	f000 fd62 	bl	8003d6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <prvCheckTasksWaitingTermination+0x50>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fd4d 	bl	8001d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <prvCheckTasksWaitingTermination+0x54>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3b01      	subs	r3, #1
 80032c0:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <prvCheckTasksWaitingTermination+0x54>)
 80032c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <prvCheckTasksWaitingTermination+0x58>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <prvCheckTasksWaitingTermination+0x58>)
 80032cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032ce:	f000 fd7d 	bl	8003dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f810 	bl	80032f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <prvCheckTasksWaitingTermination+0x58>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e1      	bne.n	80032a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000c38 	.word	0x20000c38
 80032f0:	20000c64 	.word	0x20000c64
 80032f4:	20000c4c 	.word	0x20000c4c

080032f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fef0 	bl	80040f4 <vPortFree>
				vPortFree( pxTCB );
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 feed 	bl	80040f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800331a:	e018      	b.n	800334e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003322:	2b01      	cmp	r3, #1
 8003324:	d103      	bne.n	800332e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fee4 	bl	80040f4 <vPortFree>
	}
 800332c:	e00f      	b.n	800334e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003334:	2b02      	cmp	r3, #2
 8003336:	d00a      	beq.n	800334e <prvDeleteTCB+0x56>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <prvDeleteTCB+0x54>
	}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <prvResetNextTaskUnblockTime+0x40>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <prvResetNextTaskUnblockTime+0x14>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <prvResetNextTaskUnblockTime+0x16>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <prvResetNextTaskUnblockTime+0x44>)
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800337a:	e008      	b.n	800338e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <prvResetNextTaskUnblockTime+0x40>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <prvResetNextTaskUnblockTime+0x44>)
 800338c:	6013      	str	r3, [r2, #0]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	20000c1c 	.word	0x20000c1c
 800339c:	20000c84 	.word	0x20000c84

080033a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <xTaskGetSchedulerState+0x34>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80033ae:	2301      	movs	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	e008      	b.n	80033c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <xTaskGetSchedulerState+0x38>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033bc:	2302      	movs	r3, #2
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	e001      	b.n	80033c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033c6:	687b      	ldr	r3, [r7, #4]
	}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000c70 	.word	0x20000c70
 80033d8:	20000c8c 	.word	0x20000c8c

080033dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d056      	beq.n	80034a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033f2:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <xTaskPriorityDisinherit+0xd0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d00a      	beq.n	8003412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	60fb      	str	r3, [r7, #12]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60bb      	str	r3, [r7, #8]
}
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	429a      	cmp	r2, r3
 8003444:	d02c      	beq.n	80034a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d128      	bne.n	80034a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3304      	adds	r3, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe fc7e 	bl	8001d54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <xTaskPriorityDisinherit+0xd4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d903      	bls.n	8003480 <xTaskPriorityDisinherit+0xa4>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <xTaskPriorityDisinherit+0xd4>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <xTaskPriorityDisinherit+0xd8>)
 800348e:	441a      	add	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f7fe fc01 	bl	8001c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034a0:	697b      	ldr	r3, [r7, #20]
	}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000790 	.word	0x20000790
 80034b0:	20000c6c 	.word	0x20000c6c
 80034b4:	20000794 	.word	0x20000794

080034b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <prvAddCurrentTaskToDelayedList+0x90>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fc40 	bl	8001d54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d10a      	bne.n	80034f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4819      	ldr	r0, [pc, #100]	; (8003550 <prvAddCurrentTaskToDelayedList+0x98>)
 80034ec:	f7fe fbd7 	bl	8001c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034f0:	e026      	b.n	8003540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	429a      	cmp	r2, r3
 8003508:	d209      	bcs.n	800351e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7fe fbe4 	bl	8001ce4 <vListInsert>
}
 800351c:	e010      	b.n	8003540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7fe fbda 	bl	8001ce4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d202      	bcs.n	8003540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <prvAddCurrentTaskToDelayedList+0xa4>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000c68 	.word	0x20000c68
 800354c:	20000790 	.word	0x20000790
 8003550:	20000c50 	.word	0x20000c50
 8003554:	20000c20 	.word	0x20000c20
 8003558:	20000c1c 	.word	0x20000c1c
 800355c:	20000c84 	.word	0x20000c84

08003560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800356a:	f000 facb 	bl	8003b04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <xTimerCreateTimerTask+0x80>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d021      	beq.n	80035ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800357e:	1d3a      	adds	r2, r7, #4
 8003580:	f107 0108 	add.w	r1, r7, #8
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fb43 	bl	8001c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	9202      	str	r2, [sp, #8]
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2302      	movs	r3, #2
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2300      	movs	r3, #0
 800359e:	460a      	mov	r2, r1
 80035a0:	4910      	ldr	r1, [pc, #64]	; (80035e4 <xTimerCreateTimerTask+0x84>)
 80035a2:	4811      	ldr	r0, [pc, #68]	; (80035e8 <xTimerCreateTimerTask+0x88>)
 80035a4:	f7ff f8e4 	bl	8002770 <xTaskCreateStatic>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <xTimerCreateTimerTask+0x8c>)
 80035ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <xTimerCreateTimerTask+0x8c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80035b6:	2301      	movs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	613b      	str	r3, [r7, #16]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80035d6:	697b      	ldr	r3, [r7, #20]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000cc0 	.word	0x20000cc0
 80035e4:	08004404 	.word	0x08004404
 80035e8:	0800370d 	.word	0x0800370d
 80035ec:	20000cc4 	.word	0x20000cc4

080035f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	623b      	str	r3, [r7, #32]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <xTimerGenericCommand+0x98>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02a      	beq.n	800367c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b05      	cmp	r3, #5
 8003636:	dc18      	bgt.n	800366a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003638:	f7ff feb2 	bl	80033a0 <xTaskGetSchedulerState>
 800363c:	4603      	mov	r3, r0
 800363e:	2b02      	cmp	r3, #2
 8003640:	d109      	bne.n	8003656 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <xTimerGenericCommand+0x98>)
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	f107 0110 	add.w	r1, r7, #16
 800364a:	2300      	movs	r3, #0
 800364c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364e:	f7fe fcad 	bl	8001fac <xQueueGenericSend>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24
 8003654:	e012      	b.n	800367c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <xTimerGenericCommand+0x98>)
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f107 0110 	add.w	r1, r7, #16
 800365e:	2300      	movs	r3, #0
 8003660:	2200      	movs	r2, #0
 8003662:	f7fe fca3 	bl	8001fac <xQueueGenericSend>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24
 8003668:	e008      	b.n	800367c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <xTimerGenericCommand+0x98>)
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	f107 0110 	add.w	r1, r7, #16
 8003672:	2300      	movs	r3, #0
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	f7fe fd97 	bl	80021a8 <xQueueGenericSendFromISR>
 800367a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000cc0 	.word	0x20000cc0

0800368c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <prvProcessExpiredTimer+0x7c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe fb55 	bl	8001d54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d122      	bne.n	80036f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	18d1      	adds	r1, r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	f000 f8c8 	bl	8003854 <prvInsertTimerInActiveList>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036ca:	2300      	movs	r3, #0
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	2100      	movs	r1, #0
 80036d4:	6978      	ldr	r0, [r7, #20]
 80036d6:	f7ff ff8b 	bl	80035f0 <xTimerGenericCommand>
 80036da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	60fb      	str	r3, [r7, #12]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	6978      	ldr	r0, [r7, #20]
 80036fe:	4798      	blx	r3
}
 8003700:	bf00      	nop
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000cb8 	.word	0x20000cb8

0800370c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003714:	f107 0308 	add.w	r3, r7, #8
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f857 	bl	80037cc <prvGetNextExpireTime>
 800371e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4619      	mov	r1, r3
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f803 	bl	8003730 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800372a:	f000 f8d5 	bl	80038d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800372e:	e7f1      	b.n	8003714 <prvTimerTask+0x8>

08003730 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800373a:	f7ff fa4b 	bl	8002bd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f866 	bl	8003814 <prvSampleTimeNow>
 8003748:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d130      	bne.n	80037b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <prvProcessTimerOrBlockTask+0x3c>
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	429a      	cmp	r2, r3
 800375c:	d806      	bhi.n	800376c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800375e:	f7ff fa47 	bl	8002bf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff91 	bl	800368c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800376a:	e024      	b.n	80037b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <prvProcessTimerOrBlockTask+0x90>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <prvProcessTimerOrBlockTask+0x94>)
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	f7fe ffb9 	bl	8002708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003796:	f7ff fa2b 	bl	8002bf0 <xTaskResumeAll>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <prvProcessTimerOrBlockTask+0x98>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
}
 80037b0:	e001      	b.n	80037b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80037b2:	f7ff fa1d 	bl	8002bf0 <xTaskResumeAll>
}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000cbc 	.word	0x20000cbc
 80037c4:	20000cc0 	.word	0x20000cc0
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <prvGetNextExpireTime+0x44>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <prvGetNextExpireTime+0x44>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e001      	b.n	8003802 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003802:	68fb      	ldr	r3, [r7, #12]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000cb8 	.word	0x20000cb8

08003814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800381c:	f7ff fa86 	bl	8002d2c <xTaskGetTickCount>
 8003820:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <prvSampleTimeNow+0x3c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	429a      	cmp	r2, r3
 800382a:	d205      	bcs.n	8003838 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800382c:	f000 f908 	bl	8003a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e002      	b.n	800383e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800383e:	4a04      	ldr	r2, [pc, #16]	; (8003850 <prvSampleTimeNow+0x3c>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003844:	68fb      	ldr	r3, [r7, #12]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000cc8 	.word	0x20000cc8

08003854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d812      	bhi.n	80038a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	1ad2      	subs	r2, r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	429a      	cmp	r2, r3
 8003886:	d302      	bcc.n	800388e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e01b      	b.n	80038c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <prvInsertTimerInActiveList+0x7c>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3304      	adds	r3, #4
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f7fe fa23 	bl	8001ce4 <vListInsert>
 800389e:	e012      	b.n	80038c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d206      	bcs.n	80038b6 <prvInsertTimerInActiveList+0x62>
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e007      	b.n	80038c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <prvInsertTimerInActiveList+0x80>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3304      	adds	r3, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fe fa0f 	bl	8001ce4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80038c6:	697b      	ldr	r3, [r7, #20]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000cbc 	.word	0x20000cbc
 80038d4:	20000cb8 	.word	0x20000cb8

080038d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038de:	e09d      	b.n	8003a1c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	da18      	bge.n	8003918 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	3304      	adds	r3, #4
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	61fb      	str	r3, [r7, #28]
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800390e:	6850      	ldr	r0, [r2, #4]
 8003910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	4611      	mov	r1, r2
 8003916:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	db7d      	blt.n	8003a1a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	3304      	adds	r3, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fa10 	bl	8001d54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003934:	463b      	mov	r3, r7
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff6c 	bl	8003814 <prvSampleTimeNow>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b09      	cmp	r3, #9
 8003942:	d86b      	bhi.n	8003a1c <prvProcessReceivedCommands+0x144>
 8003944:	a201      	add	r2, pc, #4	; (adr r2, 800394c <prvProcessReceivedCommands+0x74>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	08003975 	.word	0x08003975
 8003950:	08003975 	.word	0x08003975
 8003954:	08003975 	.word	0x08003975
 8003958:	08003a1d 	.word	0x08003a1d
 800395c:	080039d1 	.word	0x080039d1
 8003960:	08003a09 	.word	0x08003a09
 8003964:	08003975 	.word	0x08003975
 8003968:	08003975 	.word	0x08003975
 800396c:	08003a1d 	.word	0x08003a1d
 8003970:	080039d1 	.word	0x080039d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	18d1      	adds	r1, r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003982:	f7ff ff67 	bl	8003854 <prvInsertTimerInActiveList>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d047      	beq.n	8003a1c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003992:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d13f      	bne.n	8003a1c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	441a      	add	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	2100      	movs	r1, #0
 80039ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ae:	f7ff fe1f 	bl	80035f0 <xTimerGenericCommand>
 80039b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d130      	bne.n	8003a1c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	61bb      	str	r3, [r7, #24]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	617b      	str	r3, [r7, #20]
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	18d1      	adds	r1, r2, r3
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a02:	f7ff ff27 	bl	8003854 <prvInsertTimerInActiveList>
					break;
 8003a06:	e009      	b.n	8003a1c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a14:	f000 fb6e 	bl	80040f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a18:	e000      	b.n	8003a1c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003a1a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <prvProcessReceivedCommands+0x164>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1d39      	adds	r1, r7, #4
 8003a22:	2200      	movs	r2, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fc57 	bl	80022d8 <xQueueReceive>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f af57 	bne.w	80038e0 <prvProcessReceivedCommands+0x8>
	}
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	3730      	adds	r7, #48	; 0x30
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000cc0 	.word	0x20000cc0

08003a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a46:	e045      	b.n	8003ad4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a48:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <prvSwitchTimerLists+0xbc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <prvSwitchTimerLists+0xbc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe f977 	bl	8001d54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d12e      	bne.n	8003ad4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d90e      	bls.n	8003aa6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a94:	4b19      	ldr	r3, [pc, #100]	; (8003afc <prvSwitchTimerLists+0xbc>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f7fe f920 	bl	8001ce4 <vListInsert>
 8003aa4:	e016      	b.n	8003ad4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	2100      	movs	r1, #0
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff fd9d 	bl	80035f0 <xTimerGenericCommand>
 8003ab6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	603b      	str	r3, [r7, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <prvSwitchTimerLists+0xbc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1b4      	bne.n	8003a48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <prvSwitchTimerLists+0xbc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <prvSwitchTimerLists+0xbc>)
 8003aea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	6013      	str	r3, [r2, #0]
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000cb8 	.word	0x20000cb8
 8003b00:	20000cbc 	.word	0x20000cbc

08003b04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b0a:	f000 f92f 	bl	8003d6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d120      	bne.n	8003b58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b16:	4814      	ldr	r0, [pc, #80]	; (8003b68 <prvCheckForValidListAndQueue+0x64>)
 8003b18:	f7fe f896 	bl	8001c48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b1c:	4813      	ldr	r0, [pc, #76]	; (8003b6c <prvCheckForValidListAndQueue+0x68>)
 8003b1e:	f7fe f893 	bl	8001c48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <prvCheckForValidListAndQueue+0x6c>)
 8003b24:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <prvCheckForValidListAndQueue+0x64>)
 8003b26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <prvCheckForValidListAndQueue+0x70>)
 8003b2a:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <prvCheckForValidListAndQueue+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <prvCheckForValidListAndQueue+0x74>)
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <prvCheckForValidListAndQueue+0x78>)
 8003b36:	2110      	movs	r1, #16
 8003b38:	200a      	movs	r0, #10
 8003b3a:	f7fe f99d 	bl	8001e78 <xQueueGenericCreateStatic>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <prvCheckForValidListAndQueue+0x60>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	490b      	ldr	r1, [pc, #44]	; (8003b80 <prvCheckForValidListAndQueue+0x7c>)
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fdb0 	bl	80026b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b58:	f000 f938 	bl	8003dcc <vPortExitCritical>
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000cc0 	.word	0x20000cc0
 8003b68:	20000c90 	.word	0x20000c90
 8003b6c:	20000ca4 	.word	0x20000ca4
 8003b70:	20000cb8 	.word	0x20000cb8
 8003b74:	20000cbc 	.word	0x20000cbc
 8003b78:	20000d6c 	.word	0x20000d6c
 8003b7c:	20000ccc 	.word	0x20000ccc
 8003b80:	0800440c 	.word	0x0800440c

08003b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b04      	subs	r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b04      	subs	r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b04      	subs	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <pxPortInitialiseStack+0x54>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3b14      	subs	r3, #20
 8003bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b20      	subs	r3, #32
 8003bca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	08003bdd 	.word	0x08003bdd

08003bdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <prvTaskExitError+0x54>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d00a      	beq.n	8003c06 <prvTaskExitError+0x2a>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	60fb      	str	r3, [r7, #12]
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <prvTaskExitError+0x28>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	60bb      	str	r3, [r7, #8]
}
 8003c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c1a:	bf00      	nop
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0fc      	beq.n	8003c1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	2000000c 	.word	0x2000000c
	...

08003c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <pxCurrentTCBConst2>)
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	6808      	ldr	r0, [r1, #0]
 8003c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c4a:	f380 8809 	msr	PSP, r0
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8811 	msr	BASEPRI, r0
 8003c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c5e:	4770      	bx	lr

08003c60 <pxCurrentTCBConst2>:
 8003c60:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop

08003c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c68:	4806      	ldr	r0, [pc, #24]	; (8003c84 <prvPortStartFirstTask+0x1c>)
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	6800      	ldr	r0, [r0, #0]
 8003c6e:	f380 8808 	msr	MSP, r0
 8003c72:	b662      	cpsie	i
 8003c74:	b661      	cpsie	f
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	df00      	svc	0
 8003c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c82:	bf00      	nop
 8003c84:	e000ed08 	.word	0xe000ed08

08003c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c8e:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <xPortStartScheduler+0xd0>)
 8003c90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	; (8003d5c <xPortStartScheduler+0xd4>)
 8003cb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003cb8:	2207      	movs	r2, #7
 8003cba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cbc:	e009      	b.n	8003cd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003cbe:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003cc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d0ef      	beq.n	8003cbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1c3 0307 	rsb	r3, r3, #7
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00a      	beq.n	8003d00 <xPortStartScheduler+0x78>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60bb      	str	r3, [r7, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003d08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <xPortStartScheduler+0xd8>)
 8003d14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <xPortStartScheduler+0xdc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <xPortStartScheduler+0xdc>)
 8003d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <xPortStartScheduler+0xdc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <xPortStartScheduler+0xdc>)
 8003d30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d36:	f000 f8b9 	bl	8003eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <xPortStartScheduler+0xe0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d40:	f7ff ff92 	bl	8003c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d44:	f7ff f8be 	bl	8002ec4 <vTaskSwitchContext>
	prvTaskExitError();
 8003d48:	f7ff ff48 	bl	8003bdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	e000e400 	.word	0xe000e400
 8003d5c:	20000dbc 	.word	0x20000dbc
 8003d60:	20000dc0 	.word	0x20000dc0
 8003d64:	e000ed20 	.word	0xe000ed20
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	607b      	str	r3, [r7, #4]
}
 8003d84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <vPortEnterCritical+0x58>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <vPortEnterCritical+0x58>)
 8003d8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <vPortEnterCritical+0x58>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d10f      	bne.n	8003db8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <vPortEnterCritical+0x5c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	603b      	str	r3, [r7, #0]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vPortEnterCritical+0x4a>
	}
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <vPortExitCritical+0x4c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <vPortExitCritical+0x24>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <vPortExitCritical+0x4c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <vPortExitCritical+0x4c>)
 8003df8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <vPortExitCritical+0x4c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <vPortExitCritical+0x42>
 8003e02:	2300      	movs	r3, #0
 8003e04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f383 8811 	msr	BASEPRI, r3
}
 8003e0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	2000000c 	.word	0x2000000c
 8003e1c:	00000000 	.word	0x00000000

08003e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e20:	f3ef 8009 	mrs	r0, PSP
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <pxCurrentTCBConst>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e30:	6010      	str	r0, [r2, #0]
 8003e32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e3a:	f380 8811 	msr	BASEPRI, r0
 8003e3e:	f7ff f841 	bl	8002ec4 <vTaskSwitchContext>
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	6808      	ldr	r0, [r1, #0]
 8003e52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e56:	f380 8809 	msr	PSP, r0
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	4770      	bx	lr

08003e60 <pxCurrentTCBConst>:
 8003e60:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop

08003e68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	607b      	str	r3, [r7, #4]
}
 8003e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e82:	f7fe ff61 	bl	8002d48 <xTaskIncrementTick>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <xPortSysTickHandler+0x40>)
 8003e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f383 8811 	msr	BASEPRI, r3
}
 8003e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <vPortSetupTimerInterrupt+0x30>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <vPortSetupTimerInterrupt+0x34>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <vPortSetupTimerInterrupt+0x38>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <vPortSetupTimerInterrupt+0x3c>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	4a08      	ldr	r2, [pc, #32]	; (8003eec <vPortSetupTimerInterrupt+0x40>)
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <vPortSetupTimerInterrupt+0x30>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	e000e010 	.word	0xe000e010
 8003ee0:	e000e018 	.word	0xe000e018
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	10624dd3 	.word	0x10624dd3
 8003eec:	e000e014 	.word	0xe000e014

08003ef0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ef6:	f3ef 8305 	mrs	r3, IPSR
 8003efa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b0f      	cmp	r3, #15
 8003f00:	d914      	bls.n	8003f2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f02:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <vPortValidateInterruptPriority+0x6c>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <vPortValidateInterruptPriority+0x70>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	7afa      	ldrb	r2, [r7, #11]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d20a      	bcs.n	8003f2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	607b      	str	r3, [r7, #4]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <vPortValidateInterruptPriority+0x74>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <vPortValidateInterruptPriority+0x78>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d90a      	bls.n	8003f52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	603b      	str	r3, [r7, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <vPortValidateInterruptPriority+0x60>
	}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	e000e3f0 	.word	0xe000e3f0
 8003f60:	20000dbc 	.word	0x20000dbc
 8003f64:	e000ed0c 	.word	0xe000ed0c
 8003f68:	20000dc0 	.word	0x20000dc0

08003f6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f78:	f7fe fe2c 	bl	8002bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f7c:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <pvPortMalloc+0x174>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f84:	f000 f910 	bl	80041a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f88:	4b56      	ldr	r3, [pc, #344]	; (80040e4 <pvPortMalloc+0x178>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 808e 	bne.w	80040b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01d      	beq.n	8003fd8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d014      	beq.n	8003fd8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <pvPortMalloc+0x6c>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	617b      	str	r3, [r7, #20]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d069      	beq.n	80040b2 <pvPortMalloc+0x146>
 8003fde:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <pvPortMalloc+0x17c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d864      	bhi.n	80040b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <pvPortMalloc+0x180>)
 8003fea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <pvPortMalloc+0x180>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff2:	e004      	b.n	8003ffe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d903      	bls.n	8004010 <pvPortMalloc+0xa4>
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f1      	bne.n	8003ff4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004010:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <pvPortMalloc+0x174>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	429a      	cmp	r2, r3
 8004018:	d04b      	beq.n	80040b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2208      	movs	r2, #8
 8004020:	4413      	add	r3, r2
 8004022:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	1ad2      	subs	r2, r2, r3
 8004034:	2308      	movs	r3, #8
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	429a      	cmp	r2, r3
 800403a:	d91f      	bls.n	800407c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <pvPortMalloc+0xf8>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	613b      	str	r3, [r7, #16]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004076:	69b8      	ldr	r0, [r7, #24]
 8004078:	f000 f8f8 	bl	800426c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800407c:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <pvPortMalloc+0x17c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <pvPortMalloc+0x17c>)
 8004088:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <pvPortMalloc+0x17c>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <pvPortMalloc+0x184>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d203      	bcs.n	800409e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <pvPortMalloc+0x17c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <pvPortMalloc+0x184>)
 800409c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <pvPortMalloc+0x178>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040b2:	f7fe fd9d 	bl	8002bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <pvPortMalloc+0x16a>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <pvPortMalloc+0x168>
	return pvReturn;
 80040d6:	69fb      	ldr	r3, [r7, #28]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3728      	adds	r7, #40	; 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	2000219c 	.word	0x2000219c
 80040e4:	200021a8 	.word	0x200021a8
 80040e8:	200021a0 	.word	0x200021a0
 80040ec:	20002194 	.word	0x20002194
 80040f0:	200021a4 	.word	0x200021a4

080040f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d048      	beq.n	8004198 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004106:	2308      	movs	r3, #8
 8004108:	425b      	negs	r3, r3
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <vPortFree+0xac>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <vPortFree+0x44>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60fb      	str	r3, [r7, #12]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <vPortFree+0x62>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	60bb      	str	r3, [r7, #8]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <vPortFree+0xac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d019      	beq.n	8004198 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d115      	bne.n	8004198 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <vPortFree+0xac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	43db      	mvns	r3, r3
 8004176:	401a      	ands	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800417c:	f7fe fd2a 	bl	8002bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <vPortFree+0xb0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4413      	add	r3, r2
 800418a:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <vPortFree+0xb0>)
 800418c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800418e:	6938      	ldr	r0, [r7, #16]
 8004190:	f000 f86c 	bl	800426c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004194:	f7fe fd2c 	bl	8002bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	200021a8 	.word	0x200021a8
 80041a4:	200021a0 	.word	0x200021a0

080041a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041ae:	f241 33d0 	movw	r3, #5072	; 0x13d0
 80041b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <prvHeapInit+0xac>)
 80041b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3307      	adds	r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <prvHeapInit+0xac>)
 80041d8:	4413      	add	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041e0:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <prvHeapInit+0xb0>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <prvHeapInit+0xb0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4413      	add	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041f4:	2208      	movs	r2, #8
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0307 	bic.w	r3, r3, #7
 8004202:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a15      	ldr	r2, [pc, #84]	; (800425c <prvHeapInit+0xb4>)
 8004208:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <prvHeapInit+0xb4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <prvHeapInit+0xb4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <prvHeapInit+0xb4>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <prvHeapInit+0xb8>)
 8004236:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a09      	ldr	r2, [pc, #36]	; (8004264 <prvHeapInit+0xbc>)
 800423e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <prvHeapInit+0xc0>)
 8004242:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004246:	601a      	str	r2, [r3, #0]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000dc4 	.word	0x20000dc4
 8004258:	20002194 	.word	0x20002194
 800425c:	2000219c 	.word	0x2000219c
 8004260:	200021a4 	.word	0x200021a4
 8004264:	200021a0 	.word	0x200021a0
 8004268:	200021a8 	.word	0x200021a8

0800426c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004274:	4b27      	ldr	r3, [pc, #156]	; (8004314 <prvInsertBlockIntoFreeList+0xa8>)
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e002      	b.n	8004280 <prvInsertBlockIntoFreeList+0x14>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d8f7      	bhi.n	800427a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	4413      	add	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d108      	bne.n	80042ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	441a      	add	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	441a      	add	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d118      	bne.n	80042f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <prvInsertBlockIntoFreeList+0xac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d00d      	beq.n	80042ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	441a      	add	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e008      	b.n	80042fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <prvInsertBlockIntoFreeList+0xac>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e003      	b.n	80042fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d002      	beq.n	800430a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	20002194 	.word	0x20002194
 8004318:	2000219c 	.word	0x2000219c

0800431c <__libc_init_array>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	2600      	movs	r6, #0
 8004320:	4d0c      	ldr	r5, [pc, #48]	; (8004354 <__libc_init_array+0x38>)
 8004322:	4c0d      	ldr	r4, [pc, #52]	; (8004358 <__libc_init_array+0x3c>)
 8004324:	1b64      	subs	r4, r4, r5
 8004326:	10a4      	asrs	r4, r4, #2
 8004328:	42a6      	cmp	r6, r4
 800432a:	d109      	bne.n	8004340 <__libc_init_array+0x24>
 800432c:	f000 f830 	bl	8004390 <_init>
 8004330:	2600      	movs	r6, #0
 8004332:	4d0a      	ldr	r5, [pc, #40]	; (800435c <__libc_init_array+0x40>)
 8004334:	4c0a      	ldr	r4, [pc, #40]	; (8004360 <__libc_init_array+0x44>)
 8004336:	1b64      	subs	r4, r4, r5
 8004338:	10a4      	asrs	r4, r4, #2
 800433a:	42a6      	cmp	r6, r4
 800433c:	d105      	bne.n	800434a <__libc_init_array+0x2e>
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	f855 3b04 	ldr.w	r3, [r5], #4
 8004344:	4798      	blx	r3
 8004346:	3601      	adds	r6, #1
 8004348:	e7ee      	b.n	8004328 <__libc_init_array+0xc>
 800434a:	f855 3b04 	ldr.w	r3, [r5], #4
 800434e:	4798      	blx	r3
 8004350:	3601      	adds	r6, #1
 8004352:	e7f2      	b.n	800433a <__libc_init_array+0x1e>
 8004354:	0800453c 	.word	0x0800453c
 8004358:	0800453c 	.word	0x0800453c
 800435c:	0800453c 	.word	0x0800453c
 8004360:	08004540 	.word	0x08004540

08004364 <memcpy>:
 8004364:	440a      	add	r2, r1
 8004366:	4291      	cmp	r1, r2
 8004368:	f100 33ff 	add.w	r3, r0, #4294967295
 800436c:	d100      	bne.n	8004370 <memcpy+0xc>
 800436e:	4770      	bx	lr
 8004370:	b510      	push	{r4, lr}
 8004372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004376:	4291      	cmp	r1, r2
 8004378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437c:	d1f9      	bne.n	8004372 <memcpy+0xe>
 800437e:	bd10      	pop	{r4, pc}

08004380 <memset>:
 8004380:	4603      	mov	r3, r0
 8004382:	4402      	add	r2, r0
 8004384:	4293      	cmp	r3, r2
 8004386:	d100      	bne.n	800438a <memset+0xa>
 8004388:	4770      	bx	lr
 800438a:	f803 1b01 	strb.w	r1, [r3], #1
 800438e:	e7f9      	b.n	8004384 <memset+0x4>

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
